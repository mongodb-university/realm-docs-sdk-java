{"commentText": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted. You then\n create your objects within a Realm, and use your custom subclasses instead of using the RealmObject class directly.\n <p>\n An annotation processor will create a proxy class for your RealmObject subclass.\n <p>\n The following field data types are supported:\n <ul>\n <li>boolean/Boolean</li>\n <li>short/Short</li>\n <li>int/Integer</li>\n <li>long/Long</li>\n <li>float/Float</li>\n <li>double/Double</li>\n <li>byte[]</li>\n <li>String</li>\n <li>Date</li>\n <li>org.bson.types.Decimal128</li>\n <li>org.bson.types.ObjectId</li>\n <li>Any RealmObject subclass</li>\n <li>RealmList</li>\n </ul>\n <p>\n The types <code>short</code>, <code>int</code>, and <code>long</code> are mapped to <code>long</code> when storing\n within a Realm.\n <p>\n The only restriction a RealmObject has is that fields are not allowed to be final or volatile.\n Any method as well as public fields are allowed. When providing custom constructors, a public constructor with\n no arguments must be declared.\n <p>\n Fields annotated with {@link io.realm.annotations.Ignore} don't have these restrictions and don't require either a\n getter or setter.\n <p>\n Realm will create indexes for fields annotated with {@link io.realm.annotations.Index}. This will speedup queries but\n will have a negative impact on inserts and updates.\n <p>\n A RealmObject cannot be passed between different threads.", "name": "RealmObject", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": true, "isClass": true, "isIncluded": true, "position": {"line": 76, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#createObject(Class)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#createObject(Class)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#createObject(Class)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "createObject(Class)"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyToRealm(RealmModel, ImportFlag...)"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#createObject(Class)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#createObject(Class)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#createObject(Class)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "createObject(Class)"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyToRealm(RealmModel, ImportFlag...)"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted. You then\n create your objects within a Realm, and use your custom subclasses instead of using the RealmObject class directly.\n <p>\n An annotation processor will create a proxy class for your RealmObject subclass.\n <p>\n The following field data types are supported:\n <ul>\n <li>boolean/Boolean</li>\n <li>short/Short</li>\n <li>int/Integer</li>\n <li>long/Long</li>\n <li>float/Float</li>\n <li>double/Double</li>\n <li>byte[]</li>\n <li>String</li>\n <li>Date</li>\n <li>org.bson.types.Decimal128</li>\n <li>org.bson.types.ObjectId</li>\n <li>Any RealmObject subclass</li>\n <li>RealmList</li>\n </ul>\n <p>\n The types <code>short</code>, <code>int</code>, and <code>long</code> are mapped to <code>long</code> when storing\n within a Realm.\n <p>\n The only restriction a RealmObject has is that fields are not allowed to be final or volatile.\n Any method as well as public fields are allowed. When providing custom constructors, a public constructor with\n no arguments must be declared.\n <p>\n Fields annotated with ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted. You then\n create your objects within a Realm, and use your custom subclasses instead of using the RealmObject class directly.\n <p>\n An annotation processor will create a proxy class for your RealmObject subclass.\n <p>\n The following field data types are supported:\n <ul>\n <li>boolean/Boolean</li>\n <li>short/Short</li>\n <li>int/Integer</li>\n <li>long/Long</li>\n <li>float/Float</li>\n <li>double/Double</li>\n <li>byte[]</li>\n <li>String</li>\n <li>Date</li>\n <li>org.bson.types.Decimal128</li>\n <li>org.bson.types.ObjectId</li>\n <li>Any RealmObject subclass</li>\n <li>RealmList</li>\n </ul>\n <p>\n The types <code>short</code>, <code>int</code>, and <code>long</code> are mapped to <code>long</code> when storing\n within a Realm.\n <p>\n The only restriction a RealmObject has is that fields are not allowed to be final or volatile.\n Any method as well as public fields are allowed. When providing custom constructors, a public constructor with\n no arguments must be declared.\n <p>\n Fields annotated with "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.annotations.Ignore", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.Ignore"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.Ignore"}], "label": "", "referencedClassName": "io.realm.annotations.Ignore", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.Ignore", "typeName": "Ignore", "qualifiedTypeName": "io.realm.annotations.Ignore", "simpleTypeName": "Ignore", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " don't have these restrictions and don't require either a\n getter or setter.\n <p>\n Realm will create indexes for fields annotated with ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " don't have these restrictions and don't require either a\n getter or setter.\n <p>\n Realm will create indexes for fields annotated with "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "don't have these restrictions and don't require either a\n getter or setter."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.annotations.Index", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.Index"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.annotations.Index"}], "label": "", "referencedClassName": "io.realm.annotations.Index", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.Index", "typeName": "Index", "qualifiedTypeName": "io.realm.annotations.Index", "simpleTypeName": "Index", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This will speedup queries but\n will have a negative impact on inserts and updates.\n <p>\n A RealmObject cannot be passed between different threads.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This will speedup queries but\n will have a negative impact on inserts and updates.\n <p>\n A RealmObject cannot be passed between different threads."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "In Realm you define your RealmObject classes by sub-classing RealmObject and adding fields to be persisted."}]}], "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject", "modifierSpecifier": 1025, "modifiers": "public abstract", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isAbstract": true, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [{"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "inheritedMethods": {"java.lang.Object": ["getClass", "hashCode", "equals", "clone", "toString", "notify", "notifyAll", "wait", "wait", "wait", "finalize"], "io.realm.RealmModel": [], "io.realm.internal.ManageableObject": ["isManaged", "isValid", "isFrozen"]}, "interfaceTypes": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, {"_class": "ClassDoc", "asString": "io.realm.internal.ManageableObject", "typeName": "ManageableObject", "qualifiedTypeName": "io.realm.internal.ManageableObject", "simpleTypeName": "ManageableObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "typeParameters": [], "typeParamTags": [], "fields": [], "enumConstants": [], "methods": [{"commentText": "Deletes the object from the Realm it is currently associated to.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException.", "name": "deleteFromRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 90, "column": 23, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated to."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.deleteFromRealm", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Deletes the object from the Realm it is currently associated with.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException.", "name": "deleteFromRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 103, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with.\n <p>\n After this method is called the object will be invalid and any operation (read or write) performed on it will\n fail with an IllegalStateException."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Deletes the object from the Realm it is currently associated with."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.deleteFromRealm", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n {@link io.realm.Realm} been closed. It will always return {@code true} for unmanaged objects.\n <p>\n Note that this can be used to check the validity of certain conditions such as being {@code null}\n when observed.\n <pre>\n {@code\n realm.where(BannerRealm.class).equalTo(\"type\", type).findFirstAsync().asFlowable()\n      .filter(result.isLoaded() && result.isValid())\n      .first()\n }\n </pre>", "name": "isValid", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 142, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the object is still accessible or an unmanaged object, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is still accessible or an unmanaged object, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is still accessible or an unmanaged object, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://github.com/realm/realm-java/tree/master/examples/rxJavaExample\">Examples using Realm with RxJava</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed. It will always return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed. It will always return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "been closed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for unmanaged objects.\n <p>\n Note that this can be used to check the validity of certain conditions such as being ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for unmanaged objects.\n <p>\n Note that this can be used to check the validity of certain conditions such as being "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for unmanaged objects."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n when observed.\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n when observed.\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "when observed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n realm.where(BannerRealm.class).equalTo(\"type\", type).findFirstAsync().asFlowable()\n      .filter(result.isLoaded() && result.isValid())\n      .first()\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n realm.where(BannerRealm.class).equalTo(\"type\", type).findFirstAsync().asFlowable()\n      .filter(result.isLoaded() && result.isValid())\n      .first()\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(BannerRealm.class).equalTo(\"type\", type).findFirstAsync().asFlowable()\n      .filter(result.isLoaded() && result.isValid())\n      .first()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "been closed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isValid", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n {@link io.realm.Realm} been closed. It will always return {@code true} for unmanaged objects.", "name": "isValid", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 153, "column": 50, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check validity for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check validity for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check validity for."}], "parameterName": "object", "parameterComment": "RealmObject to check validity for.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the object is still accessible or an unmanaged object, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is still accessible or an unmanaged object, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is still accessible or an unmanaged object, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check validity for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check validity for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check validity for."}], "parameterName": "object", "parameterComment": "RealmObject to check validity for.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed. It will always return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed. It will always return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "been closed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for unmanaged objects.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for unmanaged objects."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for unmanaged objects."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the RealmObject is still valid to use i.e., the RealmObject hasn't been deleted nor has the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " been closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "been closed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isValid", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check validity for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check validity for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check validity for."}], "parameterName": "object", "parameterComment": "RealmObject to check validity for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns whether or not this RealmObject is frozen.", "name": "isFrozen", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 171, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the RealmObject is frozen, {@code false} if it is not.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the RealmObject is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the RealmObject is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}]}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isFrozen", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an {@link IllegalStateException}.\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an {@link IllegalStateException}.\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set {@link RealmConfiguration.Builder#maxNumberOfActiveVersions(long)}.", "name": "freeze", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 193, "column": 43, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a frozen copy of this object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this object."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "maxNumberOfActiveVersions(long)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.freeze", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "SuppressWarnings.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang"}, "qualifiedName": "java.lang.SuppressWarnings.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, "value": "\"TypeParameterUnusedInFormals\""}], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}}, {"commentText": "Returns whether or not this RealmObject is frozen.", "name": "isFrozen", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 204, "column": 50, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the RealmObject is frozen, {@code false} if it is not.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the RealmObject is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the RealmObject is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}]}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this RealmObject is frozen."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isFrozen", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an {@link IllegalStateException}.\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an {@link IllegalStateException}.\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set {@link RealmConfiguration.Builder#maxNumberOfActiveVersions(long)}.", "name": "freeze", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 230, "column": 44, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a frozen copy of this object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this object."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object. The frozen copy can be read and queried from any thread without throwing\n an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a RealmObject also creates a frozen Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and\n object will be closed as well.\n <p>\n Frozen objects can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen objects with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation it is possible to set "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "maxNumberOfActiveVersions(long)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this object."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.freeze", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}}, {"commentText": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like {@link RealmQuery#findFirstAsync()} return an {@link RealmObject} that represents the future\n result of the {@link RealmQuery}. It can be considered similar to a {@link java.util.concurrent.Future} in this\n regard.\n <p>\n Once {@code isLoaded()} returns {@code true}, the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the {@link RealmObject} will\n become a \"null\" object.\n <p>\n \"Null\" objects represents {@code null}.  An exception is throw if any accessor is called, so it is important to\n also check {@link #isValid()} before calling any methods. A common pattern is:\n <p>\n <pre>\n {@code\n Person person = realm.where(Person.class).findFirstAsync();\n person.isLoaded(); // == false\n person.addChangeListener(new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          person.isLoaded(); // Always true here\n          if (person.isValid()) {\n              // It is safe to access the person.\n          }\n      }\n });\n }\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return {@code true} for them.\n This method will return {@code true} if called on an unmanaged object (created outside of Realm).", "name": "isLoaded", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 291, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the query has completed, {@code false} if the query is in\n progress.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is in\n progress."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is in\n progress."}]}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery#findFirstAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findFirstAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findFirstAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirstAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " return an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " return an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "return an"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " that represents the future\n result of the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " that represents the future\n result of the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "that represents the future\n result of the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It can be considered similar to a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It can be considered similar to a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "java.util.concurrent.Future", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.util.concurrent.Future"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.util.concurrent.Future"}], "label": "", "referencedClassName": "java.util.concurrent.Future", "referencedClass": {"_class": "ClassDoc", "asString": "java.util.concurrent.Future<V>", "typeName": "Future", "qualifiedTypeName": "java.util.concurrent.Future", "simpleTypeName": "Future", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this\n regard.\n <p>\n Once ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this\n regard.\n <p>\n Once "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "in this\n regard."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "isLoaded()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isLoaded()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isLoaded()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will\n become a \"null\" object.\n <p>\n \"Null\" objects represents ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will\n become a \"null\" object.\n <p>\n \"Null\" objects represents "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will\n become a \"null\" object."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".  An exception is throw if any accessor is called, so it is important to\n also check ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".  An exception is throw if any accessor is called, so it is important to\n also check "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " before calling any methods. A common pattern is:\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " before calling any methods. A common pattern is:\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "before calling any methods."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n Person person = realm.where(Person.class).findFirstAsync();\n person.isLoaded(); // == false\n person.addChangeListener(new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          person.isLoaded(); // Always true here\n          if (person.isValid()) {\n              // It is safe to access the person.\n          }\n      }\n });\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n Person person = realm.where(Person.class).findFirstAsync();\n person.isLoaded(); // == false\n person.addChangeListener(new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          person.isLoaded(); // Always true here\n          if (person.isValid()) {\n              // It is safe to access the person.\n          }\n      }\n });\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Person person = realm.where(Person.class).findFirstAsync();\n person.isLoaded(); // == false\n person.addChangeListener(new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          person.isLoaded(); // Always true here\n          if (person.isValid()) {\n              // It is safe to access the person."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for them.\n This method will return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for them.\n This method will return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for them."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called on an unmanaged object (created outside of Realm).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called on an unmanaged object (created outside of Realm)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called on an unmanaged object (created outside of Realm)."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isLoaded", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like {@link RealmQuery#findFirstAsync()} return an {@link RealmObject} that represents the future result\n of the {@link RealmQuery}. It can be considered similar to a {@link java.util.concurrent.Future} in this regard.\n <p>\n Once {@code isLoaded()} returns {@code true}, the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the {@link RealmObject} will\n become a \"null\" object.\n <p>\n \"Null\" objects represents {@code null}.  An exception is throw if any accessor is called, so it is important to also\n check {@link #isValid()} before calling any methods. A common pattern is:\n <p>\n <pre>\n {@code\n Person person = realm.where(Person.class).findFirstAsync();\n RealmObject.isLoaded(person); // == false\n RealmObject.addChangeListener(person, new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          RealmObject.isLoaded(person); // always true here\n          if (RealmObject.isValid(person)) {\n              // It is safe to access the person.\n          }\n      }\n });\n }\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return {@code true} for them.\n This method will return {@code true} if called on an unmanaged object (created outside of Realm).", "name": "isLoaded", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 333, "column": 50, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check."}], "parameterName": "object", "parameterComment": "RealmObject to check.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the query has completed, {@code false} if the query is in\n progress.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is in\n progress."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is in\n progress."}]}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid(RealmModel)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid(RealmModel)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid(RealmModel)"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid(RealmModel)"}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check."}], "parameterName": "object", "parameterComment": "RealmObject to check.", "isTypeParameter": false}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "#isValid(RealmModel)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid(RealmModel)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid(RealmModel)"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid(RealmModel)"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.\n <p>\n Async methods like "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery#findFirstAsync()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findFirstAsync()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findFirstAsync()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findFirstAsync()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " return an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " return an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "return an"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " that represents the future result\n of the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " that represents the future result\n of the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "that represents the future result\n of the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It can be considered similar to a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It can be considered similar to a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "java.util.concurrent.Future", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.util.concurrent.Future"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.util.concurrent.Future"}], "label": "", "referencedClassName": "java.util.concurrent.Future", "referencedClass": {"_class": "ClassDoc", "asString": "java.util.concurrent.Future<V>", "typeName": "Future", "qualifiedTypeName": "java.util.concurrent.Future", "simpleTypeName": "Future", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this regard.\n <p>\n Once ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this regard.\n <p>\n Once "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "in this regard."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "isLoaded()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isLoaded()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "isLoaded()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters. In this case the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object represents the query result even if the query\n didn't find any object matching the query parameters."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will\n become a \"null\" object.\n <p>\n \"Null\" objects represents ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will\n become a \"null\" object.\n <p>\n \"Null\" objects represents "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will\n become a \"null\" object."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".  An exception is throw if any accessor is called, so it is important to also\n check ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".  An exception is throw if any accessor is called, so it is important to also\n check "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#isValid()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#isValid()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "isValid()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " before calling any methods. A common pattern is:\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " before calling any methods. A common pattern is:\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "before calling any methods."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n Person person = realm.where(Person.class).findFirstAsync();\n RealmObject.isLoaded(person); // == false\n RealmObject.addChangeListener(person, new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          RealmObject.isLoaded(person); // always true here\n          if (RealmObject.isValid(person)) {\n              // It is safe to access the person.\n          }\n      }\n });\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n Person person = realm.where(Person.class).findFirstAsync();\n RealmObject.isLoaded(person); // == false\n RealmObject.addChangeListener(person, new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          RealmObject.isLoaded(person); // always true here\n          if (RealmObject.isValid(person)) {\n              // It is safe to access the person.\n          }\n      }\n });\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Person person = realm.where(Person.class).findFirstAsync();\n RealmObject.isLoaded(person); // == false\n RealmObject.addChangeListener(person, new RealmChangeListener() {\n      \\@Override\n      public void onChange(Person person) {\n          RealmObject.isLoaded(person); // always true here\n          if (RealmObject.isValid(person)) {\n              // It is safe to access the person."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Synchronous RealmObjects are by definition blocking hence this method will always return "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for them.\n This method will return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for them.\n This method will return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for them."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called on an unmanaged object (created outside of Realm).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called on an unmanaged object (created outside of Realm)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called on an unmanaged object (created outside of Realm)."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the query used to find this RealmObject has completed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isLoaded", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to check.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to check."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to check."}], "parameterName": "object", "parameterComment": "RealmObject to check.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using {@link #addChangeListener(RealmChangeListener)} to be notified\n when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads than\n the one that created them.\n <p>\n <p>\n If this method returns {@code false}, the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n {@link Realm#copyToRealm(RealmModel, ImportFlag...)}. An unmanaged object can be created from a managed object by using\n {@link Realm#copyFromRealm(RealmModel)}.", "name": "isManaged", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 362, "column": 20, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the object is managed, {@code false} if it is unmanaged.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is managed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is unmanaged."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is managed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is unmanaged."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#addChangeListener(RealmChangeListener)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#addChangeListener(RealmChangeListener)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#addChangeListener(RealmChangeListener)"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "addChangeListener(RealmChangeListener)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to be notified\n when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads than\n the one that created them.\n <p>\n <p>\n If this method returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to be notified\n when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads than\n the one that created them.\n <p>\n <p>\n If this method returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to be notified\n when changes happen."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyToRealm(RealmModel, ImportFlag...)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". An unmanaged object can be created from a managed object by using\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". An unmanaged object can be created from a managed object by using\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#copyFromRealm(RealmModel)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyFromRealm(RealmModel)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyFromRealm(RealmModel)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyFromRealm(RealmModel)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isManaged", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using {@link #addChangeListener(RealmModel, RealmChangeListener)} to be\n notified when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads\n than the one that created them.\n <p>\n <p>\n If this method returns {@code false}, the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n {@link Realm#copyToRealm(RealmModel, ImportFlag...)}. An unmanaged object can be created from a managed object by using\n {@link Realm#copyFromRealm(RealmModel)}.", "name": "isManaged", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 385, "column": 50, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the object is managed, {@code false} if it is unmanaged.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is managed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is unmanaged."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is managed, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is unmanaged."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm. A managed object is just a wrapper around the data in the underlying\n Realm file. On Looper threads, a managed object will be live-updated so it always points to the latest data. It\n is possible to register a change listener using "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#addChangeListener(RealmModel, RealmChangeListener)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#addChangeListener(RealmModel, RealmChangeListener)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#addChangeListener(RealmModel, RealmChangeListener)"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "addChangeListener(RealmModel, RealmChangeListener)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to be\n notified when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads\n than the one that created them.\n <p>\n <p>\n If this method returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to be\n notified when changes happen. Managed objects are thread confined so that they cannot be accessed from other threads\n than the one that created them.\n <p>\n <p>\n If this method returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to be\n notified when changes happen."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged. An unmanaged object is just a normal Java object,\n so it can be parsed freely across threads, but the data in the object is not connected to the underlying Realm,\n so it will not be live updated.\n <p>\n <p>\n It is possible to create a managed object from an unmanaged object by using\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the object is unmanaged."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyToRealm(RealmModel, ImportFlag...)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyToRealm(RealmModel, ImportFlag...)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". An unmanaged object can be created from a managed object by using\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". An unmanaged object can be created from a managed object by using\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#copyFromRealm(RealmModel)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyFromRealm(RealmModel)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#copyFromRealm(RealmModel)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "copyFromRealm(RealmModel)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if this object is managed by Realm."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.isManaged", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns {@link Realm} instance where this {@link RealmObject} belongs.\n <p>\n You <b>must not</b> call {@link Realm#close()} against returned instance.", "name": "getRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 398, "column": 18, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@link Realm} instance where this object belongs to or {@code null} if this object is unmanaged.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this object belongs to or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if this object is unmanaged."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this object belongs to or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if this object is unmanaged."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this object is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this object is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this object is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this object is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance where this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.\n <p>\n You <b>must not</b> call ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.\n <p>\n You <b>must not</b> call "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "belongs."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#close()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "close()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " against returned instance.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " against returned instance."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "against returned instance."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance where this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "belongs."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.getRealm", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this object is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this object is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this object is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this object is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "returns {@link Realm} instance where the {@code model} belongs.\n <p>\n You <b>must not</b> call {@link Realm#close()} against returned instance.", "name": "getRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 413, "column": 25, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "model an {@link RealmModel} instance other than {@link DynamicRealmObject}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModel", "label": "", "referencedClassName": "io.realm.RealmModel", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance other than "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model an "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModel", "label": "", "referencedClassName": "io.realm.RealmModel", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance other than "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "parameterName": "model", "parameterComment": "an {@link RealmModel} instance other than {@link DynamicRealmObject}.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@link Realm} instance where the {@code model} belongs or {@code null} if the {@code model} is unmanaged.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is unmanaged."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is unmanaged."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code model} is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code model} is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the {@code model}  is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "  is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "  is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the {@code model}  is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance where the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.\n <p>\n You <b>must not</b> call ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.\n <p>\n You <b>must not</b> call "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "belongs."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#close()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#close()"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "close()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " against returned instance.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " against returned instance."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "against returned instance."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "returns"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance where the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance where the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " belongs."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "belongs."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.getRealm", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "model", "typeName": "RealmModel", "asString": "RealmModel model", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code model} is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code model} is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the {@code model}  is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "  is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "model"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "  is an instance of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or this object was already deleted or the corresponding "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm", "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " was already closed."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the {@code model}  is an instance of {@link DynamicRealmObject}\n or this object was already deleted or the corresponding {@link Realm} was already closed.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "model an {@link RealmModel} instance other than {@link DynamicRealmObject}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "an "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModel", "label": "", "referencedClassName": "io.realm.RealmModel", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance other than "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "model an "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModel", "label": "", "referencedClassName": "io.realm.RealmModel", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance other than "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "DynamicRealmObject", "label": "", "referencedClassName": "io.realm.DynamicRealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.DynamicRealmObject", "typeName": "DynamicRealmObject", "qualifiedTypeName": "io.realm.DynamicRealmObject", "simpleTypeName": "DynamicRealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "parameterName": "model", "parameterComment": "an {@link RealmModel} instance other than {@link DynamicRealmObject}.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmModel)", "flatSignature": "(RealmModel)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return {@code true} if called for an unmanaged object (created outside of Realm).", "name": "load", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 439, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if it successfully completed the query, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called for an unmanaged object (created outside of Realm).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called for an unmanaged object (created outside of Realm)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called for an unmanaged object (created outside of Realm)."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.load", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return {@code true} if called for an unmanaged object (created outside of Realm).", "name": "load", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 451, "column": 50, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to force load.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to force load."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to force load."}], "parameterName": "object", "parameterComment": "RealmObject to force load.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if it successfully completed the query, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to force load.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to force load."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to force load."}], "parameterName": "object", "parameterComment": "RealmObject to force load.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered listeners.\n <p>\n Note: This will return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called for an unmanaged object (created outside of Realm).", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if called for an unmanaged object (created outside of Realm)."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if called for an unmanaged object (created outside of Realm)."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.load", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to force load.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to force load."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to force load."}], "parameterName": "object", "parameterComment": "RealmObject to force load.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Adds a change listener to this RealmObject to get detailed information about changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 496, "column": 46, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject to get detailed information about changes."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.addChangeListener", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmObjectChangeListener<E>", "typeName": "RealmObjectChangeListener", "qualifiedTypeName": "io.realm.RealmObjectChangeListener", "simpleTypeName": "RealmObjectChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmObjectChangeListener<E>", "asString": "io.realm.RealmObjectChangeListener<E> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmObjectChangeListener<E>)", "flatSignature": "(RealmObjectChangeListener<E>)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 535, "column": 46, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this RealmObject that will be triggered if any value field or referenced RealmObject\n field is changed, or the RealmList field itself is changed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.addChangeListener", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener<E>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener<E>", "asString": "io.realm.RealmChangeListener<E> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmChangeListener<E>)", "flatSignature": "(RealmChangeListener<E>)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Adds a change listener to a RealmObject to get detailed information about the changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 578, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes. The listener will be\n triggered if any value field or referenced RealmObject field is changed, or the RealmList field itself is\n changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmObjectChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person, ObjectChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject to get detailed information about the changes."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.addChangeListener", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmObjectChangeListener<E>", "typeName": "RealmObjectChangeListener", "qualifiedTypeName": "io.realm.RealmObjectChangeListener", "simpleTypeName": "RealmObjectChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmObjectChangeListener<E>", "asString": "io.realm.RealmObjectChangeListener<E> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E, io.realm.RealmObjectChangeListener<E>)", "flatSignature": "(E, RealmObjectChangeListener<E>)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 635, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed.\n <p>\n Registering a change listener will not prevent the underlying RealmObject from being garbage collected.\n If the RealmObject is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private Person person; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       person = realm.where(Person.class).findFirst();\n       person.addChangeListener(new RealmChangeListener<Person>() {\n           \\@Override\n           public void onChange(Person person) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to a RealmObject that will be triggered if any value field or referenced RealmObject field\n is changed, or the RealmList field itself is changed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.addChangeListener", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener<E>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener<E>", "asString": "io.realm.RealmChangeListener<E> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or an unmanaged object, or the change\n listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} is {@code null} or an unmanaged object, or the change\n listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or {@link IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or {@link IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener inside a transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener inside a transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener inside a transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener inside a transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to add listener to.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to add listener to."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to add listener to."}], "parameterName": "object", "parameterComment": "RealmObject to add listener to.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E, io.realm.RealmChangeListener<E>)", "flatSignature": "(E, RealmChangeListener<E>)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes a previously registered listener.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 646, "column": 23, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeChangeListener", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmObjectChangeListener", "typeName": "RealmObjectChangeListener", "qualifiedTypeName": "io.realm.RealmObjectChangeListener", "simpleTypeName": "RealmObjectChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmObjectChangeListener", "asString": "io.realm.RealmObjectChangeListener listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmObjectChangeListener)", "flatSignature": "(RealmObjectChangeListener)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes a previously registered listener.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 657, "column": 23, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeChangeListener", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener", "asString": "io.realm.RealmChangeListener listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null} or the object is an unmanaged object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the object is an unmanaged object."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null} or the object is an unmanaged object.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmChangeListener)", "flatSignature": "(RealmChangeListener)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes a previously registered listener on the given RealmObject.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 670, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} or the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} or the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is an unmanaged RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is an unmanaged RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is an unmanaged RealmObject."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is an unmanaged RealmObject.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeChangeListener", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmObjectChangeListener", "typeName": "RealmObjectChangeListener", "qualifiedTypeName": "io.realm.RealmObjectChangeListener", "simpleTypeName": "RealmObjectChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmObjectChangeListener", "asString": "io.realm.RealmObjectChangeListener listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} or the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} or the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is an unmanaged RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is an unmanaged RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is an unmanaged RealmObject."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is an unmanaged RealmObject.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E, io.realm.RealmObjectChangeListener)", "flatSignature": "(E, RealmObjectChangeListener)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes a previously registered listener on the given RealmObject.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 702, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} or the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} or the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is an unmanaged RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is an unmanaged RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is an unmanaged RealmObject."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is an unmanaged RealmObject.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes a previously registered listener on the given RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeChangeListener", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener<E>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener<E>", "asString": "io.realm.RealmChangeListener<E> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the {@code object} or the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "object"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the {@code object} or the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is an unmanaged RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is an unmanaged RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is an unmanaged RealmObject."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is an unmanaged RealmObject.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove listener from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove listener from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove listener from."}], "parameterName": "object", "parameterComment": "RealmObject to remove listener from.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the instance to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the instance to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the instance to be removed."}], "parameterName": "listener", "parameterComment": "the instance to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E, io.realm.RealmChangeListener<E>)", "flatSignature": "(E, RealmChangeListener<E>)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes all registered listeners.", "name": "removeAllChangeListeners", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 709, "column": 23, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeAllChangeListeners", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes all registered listeners from the given RealmObject.", "name": "removeAllChangeListeners", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 719, "column": 47, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove all listeners from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove all listeners from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove all listeners from."}], "parameterName": "object", "parameterComment": "RealmObject to remove all listeners from.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is {@code null} or isn't managed by Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or isn't managed by Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or isn't managed by Realm."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is {@code null} or isn't managed by Realm.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove all listeners from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove all listeners from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove all listeners from."}], "parameterName": "object", "parameterComment": "RealmObject to remove all listeners from.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all registered listeners from the given RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.removeAllChangeListeners", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if object is {@code null} or isn't managed by Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if object is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or isn't managed by Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if object is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or isn't managed by Realm."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if object is {@code null} or isn't managed by Realm.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject to remove all listeners from.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject to remove all listeners from."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject to remove all listeners from."}], "parameterName": "object", "parameterComment": "RealmObject to remove all listeners from.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continually be emitted as the RealmObject is updated -\n {@code onComplete} will never be called.\n <p>\n When chaining a RealmObject flowable use {@code obj.<MyRealmObjectClass>asFlowable()} to pass on\n type information, otherwise the type of the following observables will be {@code RealmObject}.\n <p>\n Items emitted from Realm Flowables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }\n <p>\n If you would like the {@code asFlowable()} to stop emitting items you can instruct RxJava to\n only emit only the first item by using the {@code first()} operator:\n <p>\n <pre>\n {@code\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n }\n </pre>\n <p>", "name": "asFlowable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 776, "column": 54, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> RealmObject class that is being observed."}], "parameterName": "E", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": true}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continually be emitted as the RealmObject is updated -\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continually be emitted as the RealmObject is updated -\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n When chaining a RealmObject flowable use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n When chaining a RealmObject flowable use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.<MyRealmObjectClass>asFlowable()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.<MyRealmObjectClass>asFlowable()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.<MyRealmObjectClass>asFlowable()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to pass on\n type information, otherwise the type of the following observables will be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to pass on\n type information, otherwise the type of the following observables will be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to pass on\n type information, otherwise the type of the following observables will be"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Items emitted from Realm Flowables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Items emitted from Realm Flowables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "asFlowable()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n only emit only the first item by using the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n only emit only the first item by using the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to stop emitting items you can instruct RxJava to\n only emit only the first item by using the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "first()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "operator:"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.asFlowable", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> RealmObject class that is being observed."}], "parameterName": "E", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": true}], "signature": "()", "flatSignature": "()", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmObject", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n {@link ObjectChangeSet} will be sent. The changeset will be {@code null} the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - {@code onComplete} will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }", "name": "asChangesetObservable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 810, "column": 70, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "ObjectChangeSet", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectChangeSet"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectChangeSet"}], "label": "", "referencedClassName": "io.realm.ObjectChangeSet", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.ObjectChangeSet", "typeName": "ObjectChangeSet", "qualifiedTypeName": "io.realm.ObjectChangeSet", "simpleTypeName": "ObjectChangeSet", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be sent."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the first\n time the RealmObject is emitted."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.asChangesetObservable", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmObject", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continuously be emitted as the RealmObject is updated -\n {@code onComplete} will never be called.\n <p>\n When chaining a RealmObject observable use {@code obj.<MyRealmObjectClass>asFlowable()} to pass on\n type information, otherwise the type of the following observables will be {@code RealmObject}.\n <p>\n Items emitted from Realm Flowables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }\n <p>\n If you would like the {@code asFlowable()} to stop emitting items you can instruct RxJava to\n emit only the first item by using the {@code first()} operator:\n <p>\n <pre>\n {@code\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n }\n </pre>", "name": "asFlowable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 855, "column": 54, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject class that is being observed."}], "parameterName": "object", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continuously be emitted as the RealmObject is updated -\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject. It will emit the current object when\n subscribed to. Object updates will continuously be emitted as the RealmObject is updated -\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n When chaining a RealmObject observable use ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n When chaining a RealmObject observable use "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.<MyRealmObjectClass>asFlowable()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.<MyRealmObjectClass>asFlowable()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.<MyRealmObjectClass>asFlowable()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to pass on\n type information, otherwise the type of the following observables will be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to pass on\n type information, otherwise the type of the following observables will be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to pass on\n type information, otherwise the type of the following observables will be"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmObject", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Items emitted from Realm Flowables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Items emitted from Realm Flowables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj) -> doExpensiveWork(rxObj))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "asFlowable()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n emit only the first item by using the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n emit only the first item by using the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to stop emitting items you can instruct RxJava to\n emit only the first item by using the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "first()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "operator:"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the object once\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asFlowable()\n      .filter(obj -> obj.isLoaded())\n      .first()\n      .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an RxJava Flowable that monitors changes to this RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.asFlowable", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject class that is being observed."}], "parameterName": "object", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n {@link ObjectChangeSet} will be sent. The changeset will be {@code null} the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - {@code onComplete} will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }", "name": "asChangesetObservable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 908, "column": 70, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject class that is being observed."}], "parameterName": "object", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject. It will emit the current RealmObject when\n subscribed to. For each update to the RealmObject a pair consisting of the RealmObject and the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "ObjectChangeSet", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectChangeSet"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectChangeSet"}], "label": "", "referencedClassName": "io.realm.ObjectChangeSet", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.ObjectChangeSet", "typeName": "ObjectChangeSet", "qualifiedTypeName": "io.realm.ObjectChangeSet", "simpleTypeName": "ObjectChangeSet", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be sent."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time the RealmObject is emitted.\n <p>\n The RealmObject will continually be emitted as it is updated - "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the first\n time the RealmObject is emitted."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "obj.asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxObj, changes) -> doExpensiveWork(rxObj, changeså))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmObject."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject.asChangesetObservable", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}, "name": "object", "typeName": "E", "asString": "E object", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object RealmObject class that is being observed. Must be this class or its super types.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmObject class that is being observed. Must be this class or its super types."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object RealmObject class that is being observed."}], "parameterName": "object", "parameterComment": "RealmObject class that is being observed. Must be this class or its super types.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(E)", "flatSignature": "(E)", "typeParameters": [{"_class": "TypeVariable", "asString": "E extends io.realm.RealmModel", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [{"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}], "constructors": [{"commentText": "", "name": "RealmObject", "isField": false, "isEnumConstant": false, "isConstructor": true, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 76, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmObject.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "ExecutableMemberDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmObject", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": []}], "innerClasses": []}