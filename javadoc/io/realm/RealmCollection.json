{"commentText": "{@code RealmCollection} is the root of the collection hierarchy that Realm supports. It defines operations on data\n collections and the behavior that they will have in all implementations of {@code RealmCollection}s.\n <p>\n Realm collections are \"live\" views to the underlying data. This means that they automatically will be kept up to\n date. As a consequence, using methods like {@link Collections#unmodifiableCollection(Collection)} will not prevent\n a collection from being modified.", "name": "RealmCollection", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": true, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": true, "isIncluded": true, "position": {"line": 38, "column": 8, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> type of {@link RealmObject} stored in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "type of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " stored in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> type of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " stored in the collection."}], "parameterName": "E", "parameterComment": "type of {@link RealmObject} stored in the collection.", "isTypeParameter": true}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "", "inlineTags": [], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmCollection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is the root of the collection hierarchy that Realm supports. It defines operations on data\n collections and the behavior that they will have in all implementations of ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is the root of the collection hierarchy that Realm supports. It defines operations on data\n collections and the behavior that they will have in all implementations of "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is the root of the collection hierarchy that Realm supports."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmCollection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "s.\n <p>\n Realm collections are \"live\" views to the underlying data. This means that they automatically will be kept up to\n date. As a consequence, using methods like ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "s.\n <p>\n Realm collections are \"live\" views to the underlying data. This means that they automatically will be kept up to\n date. As a consequence, using methods like "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "s."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Collections#unmodifiableCollection(Collection)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collections#unmodifiableCollection(Collection)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collections#unmodifiableCollection(Collection)"}], "label": "", "referencedClassName": "java.util.Collections", "referencedClass": {"_class": "ClassDoc", "asString": "java.util.Collections", "typeName": "Collections", "qualifiedTypeName": "java.util.Collections", "simpleTypeName": "Collections", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "unmodifiableCollection(Collection)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will not prevent\n a collection from being modified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will not prevent\n a collection from being modified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will not prevent\n a collection from being modified."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "", "inlineTags": [], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "RealmCollection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmCollection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is the root of the collection hierarchy that Realm supports.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is the root of the collection hierarchy that Realm supports."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is the root of the collection hierarchy that Realm supports."}]}], "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection", "modifierSpecifier": 513, "modifiers": "public interface", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isAbstract": true, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [], "inheritedMethods": {"java.util.Collection": ["size", "isEmpty", "contains", "iterator", "toArray", "toArray", "add", "remove", "containsAll", "addAll", "removeAll", "removeIf", "retainAll", "clear", "equals", "hashCode", "spliterator", "stream", "parallelStream"], "io.realm.internal.ManageableObject": ["isManaged", "isValid", "isFrozen"], "java.lang.Iterable": ["iterator", "forEach", "spliterator"]}, "interfaceTypes": [{"_class": "ParameterizedType", "asString": "java.util.Collection<E>", "typeName": "Collection", "qualifiedTypeName": "java.util.Collection", "simpleTypeName": "Collection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "interfaceTypes": ["java.lang.Iterable"]}, {"_class": "ClassDoc", "asString": "io.realm.internal.ManageableObject", "typeName": "ManageableObject", "qualifiedTypeName": "io.realm.internal.ManageableObject", "simpleTypeName": "ManageableObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, {"_class": "ParameterizedType", "asString": "java.lang.Iterable<E>", "typeName": "Iterable", "qualifiedTypeName": "java.lang.Iterable", "simpleTypeName": "Iterable", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "interfaceTypes": []}], "typeParameters": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "typeParamTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> type of {@link RealmObject} stored in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "type of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " stored in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> type of "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmObject", "label": "", "referencedClassName": "io.realm.RealmObject", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmObject", "typeName": "RealmObject", "qualifiedTypeName": "io.realm.RealmObject", "simpleTypeName": "RealmObject", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " stored in the collection."}], "parameterName": "E", "parameterComment": "type of {@link RealmObject} stored in the collection.", "isTypeParameter": true}], "fields": [], "enumConstants": [], "methods": [{"commentText": "Returns a {@link RealmQuery}, which can be used to query for specific objects from this collection.", "name": "where", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 47, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a RealmQuery object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a RealmQuery object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a RealmQuery object."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm instance has been closed or queries are not otherwise available."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm instance has been closed or queries are not otherwise available.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.where", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm instance has been closed or queries are not otherwise available."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm instance has been closed or queries are not otherwise available.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "Finds the minimum value of a field.", "name": "min", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 60, "column": 12, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a minimum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a minimum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a minimum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a minimum on. Only number fields are supported.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given field, {@code null} will be\n returned. Otherwise the minimum value is returned. When determining the minimum value, objects with {@code null}\n values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned. Otherwise the minimum value is returned. When determining the minimum value, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.min", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a minimum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a minimum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a minimum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a minimum on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the maximum value of a field.", "name": "max", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 73, "column": 12, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a maximum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a maximum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a maximum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a maximum on. Only number fields are supported.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given field, {@code null} will be\n returned. Otherwise the maximum value is returned. When determining the maximum value, objects with {@code null}\n values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned. Otherwise the maximum value is returned. When determining the maximum value, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be\n returned."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum value of a field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.max", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for a maximum on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for a maximum on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for a maximum on."}], "parameterName": "fieldName", "parameterComment": "the field to look for a maximum on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Calculates the sum of a given field.", "name": "sum", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 84, "column": 12, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to sum. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to sum. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to sum."}], "parameterName": "fieldName", "parameterComment": "the field to sum. Only number fields are supported.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "the sum. If no objects exist or they all have {@code null} as the value for the given field, {@code 0}\n will be returned. When computing the sum, objects with {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the sum. If no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. When computing the sum, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the sum."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Calculates the sum of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.sum", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to sum. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to sum. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to sum."}], "parameterName": "fieldName", "parameterComment": "the field to sum. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.Number", "typeName": "Number", "qualifiedTypeName": "java.lang.Number", "simpleTypeName": "Number", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Returns the average of a given field.", "name": "average", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 96, "column": 12, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only number fields are supported.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "the average for the given field amongst objects in query results. This will be of type double for all\n types of number fields. If no objects exist or they all have {@code null} as the value for the given field,\n {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results. This will be of type double for all\n types of number fields. If no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given field,\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "0"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be returned. When computing the average, objects with "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the average for the given field amongst objects in query results."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns the average of a given field."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.average", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if the field is not a number type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field is not a number type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if the field is not a number type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if the field is not a number type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to calculate average on. Only number fields are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to calculate average on. Only number fields are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to calculate average on."}], "parameterName": "fieldName", "parameterComment": "the field to calculate average on. Only number fields are supported.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Finds the maximum date.", "name": "maxDate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 110, "column": 10, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for the maximum date."}], "parameterName": "fieldName", "parameterComment": "the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given date field, {@code null}\n will be returned. Otherwise the maximum date is returned. When determining the maximum date, objects with\n {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the maximum date is returned. When determining the maximum date, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if fieldName is not a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if fieldName is not a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the maximum date."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.maxDate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if fieldName is not a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if fieldName is not a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for the maximum date."}], "parameterName": "fieldName", "parameterComment": "the field to look for the maximum date. If fieldName is not of Date type, an exception is\n thrown.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "Finds the minimum date.", "name": "minDate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 124, "column": 10, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for the minimum date."}], "parameterName": "fieldName", "parameterComment": "the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "if no objects exist or they all have {@code null} as the value for the given date field, {@code null}\n will be returned. Otherwise the minimum date is returned. When determining the minimum date, objects with\n {@code null} values are ignored.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned. Otherwise the minimum date is returned. When determining the minimum date, objects with\n "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values are ignored."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if no objects exist or they all have "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " as the value for the given date field, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n will be returned."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if fieldName is not a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if fieldName is not a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Finds the minimum date."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.minDate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if fieldName is not a Date field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if fieldName is not a Date field."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if fieldName is not a Date field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName the field to look for the minimum date."}], "parameterName": "fieldName", "parameterComment": "the field to look for the minimum date. If fieldName is not of Date type, an exception is\n thrown.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"commentText": "This deletes all objects in the collection from the underlying Realm as well as from the collection.", "name": "deleteAllFromRealm", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 133, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if objects was deleted, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if objects was deleted, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if objects was deleted, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This deletes all objects in the collection from the underlying Realm as well as from the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.deleteAllFromRealm", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the corresponding Realm is closed or in an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the corresponding Realm is closed or in an incorrect thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the corresponding Realm is closed or in an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm has been closed or called from an incorrect thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm has been closed or called from an incorrect thread."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm has been closed or called from an incorrect thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if a collection has finished loading its data yet.", "name": "isLoaded", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 140, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if data has been loaded and is available, {@code false} if data is still being loaded.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if data has been loaded and is available, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if data is still being loaded."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if data has been loaded and is available, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if data is still being loaded."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if a collection has finished loading its data yet."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.isLoaded", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Blocks the collection until all data are available.", "name": "load", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 147, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the data could be successfully loaded, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the data could be successfully loaded, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the data could be successfully loaded, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Blocks the collection until all data are available."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.load", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if the collection is still valid to use, i.e., the {@link io.realm.Realm} instance hasn't been closed. It\n will always return {@code true} for an unmanaged collection.", "name": "isValid", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 156, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if it is still valid to use or an unmanaged collection, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is still valid to use or an unmanaged collection, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is still valid to use or an unmanaged collection, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been closed. It\n will always return ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been closed. It\n will always return "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance hasn't been closed."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for an unmanaged collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for an unmanaged collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for an unmanaged collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is still valid to use, i.e., the"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "io.realm.Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.Realm"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been closed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " instance hasn't been closed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instance hasn't been closed."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.isValid", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Checks if the collection is managed by Realm. A managed collection is just a wrapper around the data in the\n underlying Realm file. On Looper threads, a managed collection will be live-updated so it always points to the\n latest data. Managed collections are thread confined so that they cannot be accessed from other threads than the\n one that created them.\n <p>\n <p>\n If this method returns {@code false}, the collection is unmanaged. An unmanaged collection is just a normal java\n collection, so it will not be live updated.\n <p>", "name": "isManaged", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 172, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if this is a managed {@link RealmCollection}, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if this is a managed "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmCollection", "label": "", "referencedClassName": "io.realm.RealmCollection", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if this is a managed "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmCollection", "label": "", "referencedClassName": "io.realm.RealmCollection", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm. A managed collection is just a wrapper around the data in the\n underlying Realm file. On Looper threads, a managed collection will be live-updated so it always points to the\n latest data. Managed collections are thread confined so that they cannot be accessed from other threads than the\n one that created them.\n <p>\n <p>\n If this method returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm. A managed collection is just a wrapper around the data in the\n underlying Realm file. On Looper threads, a managed collection will be live-updated so it always points to the\n latest data. Managed collections are thread confined so that they cannot be accessed from other threads than the\n one that created them.\n <p>\n <p>\n If this method returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the collection is unmanaged. An unmanaged collection is just a normal java\n collection, so it will not be live updated.\n <p>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the collection is unmanaged. An unmanaged collection is just a normal java\n collection, so it will not be live updated.\n <p>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the collection is unmanaged."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Checks if the collection is managed by Realm."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.isManaged", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Tests whether this {@code Collection} contains the specified object. Returns\n {@code true} if and only if at least one element {@code elem} in this\n {@code Collection} meets following requirement:\n {@code (object==null ? elem==null : object.equals(elem))}.", "name": "contains", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 186, "column": 13, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object the object to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the object to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object the object to search for."}], "parameterName": "object", "parameterComment": "the object to search for.", "isTypeParameter": false}, {"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if object is an element of this {@code Collection}, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if object is an element of this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if object is an element of this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "NullPointerException if the object to look for is {@code null} and this {@code Collection} doesn't\n support {@code null} elements.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the object to look for is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " doesn't\n support "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "NullPointerException if the object to look for is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " doesn't\n support "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements."}], "exceptionName": "NullPointerException", "exceptionComment": "if the object to look for is {@code null} and this {@code Collection} doesn't\n support {@code null} elements.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.NullPointerException", "typeName": "NullPointerException", "qualifiedTypeName": "java.lang.NullPointerException", "simpleTypeName": "NullPointerException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " contains the specified object. Returns\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " contains the specified object. Returns\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "contains the specified object."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if and only if at least one element ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if and only if at least one element "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if and only if at least one element"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "elem", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "elem"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "elem"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " in this\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "in this"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " meets following requirement:\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " meets following requirement:\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "meets following requirement:"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "(object==null ? elem==null : object.equals(elem))", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "(object==null ? elem==null : object.equals(elem))"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "(object==null ? elem==null : object.equals(elem))"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Tests whether this"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Collection"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " contains the specified object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " contains the specified object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "contains the specified object."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.contains", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "object", "typeName": "Object", "asString": "Object object", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "NullPointerException if the object to look for is {@code null} and this {@code Collection} doesn't\n support {@code null} elements.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the object to look for is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " doesn't\n support "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "NullPointerException if the object to look for is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and this "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Collection"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " doesn't\n support "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements."}], "exceptionName": "NullPointerException", "exceptionComment": "if the object to look for is {@code null} and this {@code Collection} doesn't\n support {@code null} elements.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.NullPointerException", "typeName": "NullPointerException", "qualifiedTypeName": "java.lang.NullPointerException", "simpleTypeName": "NullPointerException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "object the object to search for.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the object to search for."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "object the object to search for."}], "parameterName": "object", "parameterComment": "the object to search for.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.Object)", "flatSignature": "(Object)", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns a frozen snapshot of this collection. The frozen copy can be read and queried from any thread without throwing\n an {@link IllegalStateException}.\n <p>\n Freezing a collection also creates a Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and this\n collection will be closed as well.\n <p>\n Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an {@link IllegalStateException}.\n <p>\n Note: Keeping a large number of frozen collections with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation, it is possible to set {@link RealmConfiguration.Builder#maxNumberOfActiveVersions(long)}.", "name": "freeze", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 205, "column": 24, "file": "./realm/realm-library/src/main/java/io/realm/RealmCollection.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a frozen copy of this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this collection."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection. The frozen copy can be read and queried from any thread without throwing\n an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection. The frozen copy can be read and queried from any thread without throwing\n an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a collection also creates a Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and this\n collection will be closed as well.\n <p>\n Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a collection also creates a Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and this\n collection will be closed as well.\n <p>\n Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen collections with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation, it is possible to set ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen collections with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation, it is possible to set "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "maxNumberOfActiveVersions(long)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmCollection.freeze", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": true, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmCollection<E>", "typeName": "RealmCollection", "qualifiedTypeName": "io.realm.RealmCollection", "simpleTypeName": "RealmCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "interfaceTypes": ["java.util.Collection", "io.realm.internal.ManageableObject"]}}], "constructors": [], "innerClasses": []}