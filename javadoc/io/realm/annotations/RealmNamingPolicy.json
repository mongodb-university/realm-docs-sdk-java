{"commentText": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file.\n <p>\n Examples where this is useful:\n <ul>\n      <li>\n          To support two model classes with the same simple name but in different packages.\n      </li>\n      <li>\n          To make it easier to work with cross platform schemas as naming conventions are different.\n      </li>\n      <li>\n          To use a Java class name that is longer than the 57 character limit enforced by Realm.\n      </li>\n      <li>\n          To change a field name in Java without forcing app users through a migration process.\n      </li>\n </ul>\n\n Depending on where the policy is applied, it will have slightly different semantics:\n <ul>\n     <li>\n         If applied to {@link RealmModule#classNamingPolicy} all classes part of that module\n         will be affected. If a class is part of multiple modules, the same naming policy must be\n         applied to both modules, otherwise an error will be thrown.\n     </li>\n     <li>\n         If applied to {@link RealmModule#fieldNamingPolicy} all persistable fields in all classes\n         part of this module will be affected.\n     </li>\n\n      <li>\n          If applied to {@link RealmClass#fieldNamingPolicy} all fields in that class will be\n          affected. This will override any field naming policy specified on a module.\n      </li>\n </ul>\n <p>\n An example of this:\n <pre>\n {@code\n \\@RealmClass(name = \"__person\", fieldNamingPolicy = RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n public class Person implements RealmModel { // is converted to \"__person\" internally\n     public string firstName; // Is converted to \"first_name\" internally\n }\n }\n </pre>\n <p>\n Choosing an internal name that differs from the name used in the Java model classes has the\n following implications:\n <ul>\n      <li>\n          Queries on {@code DynamicRealm} must use the internal name. Queries on normal {@code Realm}\n          instances must continue to use the name as it is defined in the Java class.\n      </li>\n      <li>\n          Migrations must use the internal name when creating classes and fields.\n      </li>\n      <li>\n          Schema errors reported will use the internal names.\n      </li>\n </ul>\n <p>\n When automatically converting Java variable names, each variable name is normalized by splitting\n it into a list of words that are then joined using the rules of the target format. The following\n heuristics are used for determining what constitutes a \"word\".\n <ol>\n     <li>\n         Anytime a {@code _} or {@code $} is encountered.\n         Examples are \"_FirstName\", \"_First_Name\" and \"$First$Name\" which all becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from a lower case character to an upper case character as\n         identified by {@link Character#isUpperCase(int)} and {@link Character#isLowerCase(int)}.\n         Example is \"FirstName\" which becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from more than one uppercase character to a lower case one. The last\n         upper case letter is assumed to be part of the next word. This is identified by using\n         {@link Character#isUpperCase(int)} and {@link Character#isLowerCase(int)}.\n         Example is \"FIRSTName\" which becomes \"FIRST\" and \"Name.\n     </li>\n     <li>\n         Some characters like emojiis are neither uppercase nor lowercase characters, so they will\n         be part of the current word.\n         Examples are \"myüòÅ\" and \"MYüòÅ\" which are both treated as one word.\n     </li>\n     <li>\n         Hungarian notation, i.e. variable names starting with lowercase \"m\" followed by uppercase\n         letter is stripped and not considered part of any word.\n         Example is \"mFirstName\" and \"mFIRSTName\" which becomes \"First\" and \"Name.\n     </li>\n </ol>\n <p>\n Note that changing the internal name does <i>NOT</i> affect importing data from JSON. The JSON\n data must still follow the names as defined in the Realm Java class.\n <p>\n When it comes to parsing JSON using standard libraries like Moshi, GSON or Jackson it is\n important to keep in mind that these libraries define the transformation from JSON to Java\n while setting internal Realm names define the transformation from Java to the Realm file.\n <p>\n This means that if you want to import data into Realm from JSON using these libraries you still\n need to provide the annotations from both the JSON parser library and Realm.\n <p>\n Using Moshi, it would look something like this:\n <pre>\n {@code\n public class Person extends RealmObject {\n     \\@Json(name = \"first_name\") // Name used in JSON input.\n     \\@RealmField(name = \"first_name\") // Name used internally in the Realm file.\n     public string firstName; // name used in Java\n }\n }\n </pre>", "name": "RealmNamingPolicy", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": true, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": true, "isIncluded": true, "position": {"line": 122, "column": 8, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmModule", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule"}], "label": "", "referencedClassName": "io.realm.annotations.RealmModule", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmModule", "typeName": "RealmModule", "qualifiedTypeName": "io.realm.annotations.RealmModule", "simpleTypeName": "RealmModule", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmClass", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass"}], "label": "", "referencedClassName": "io.realm.annotations.RealmClass", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmField", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmField"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmField"}], "label": "", "referencedClassName": "io.realm.annotations.RealmField", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmField", "typeName": "RealmField", "qualifiedTypeName": "io.realm.annotations.RealmField", "simpleTypeName": "RealmField", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmModule", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule"}], "label": "", "referencedClassName": "io.realm.annotations.RealmModule", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmModule", "typeName": "RealmModule", "qualifiedTypeName": "io.realm.annotations.RealmModule", "simpleTypeName": "RealmModule", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmClass", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass"}], "label": "", "referencedClassName": "io.realm.annotations.RealmClass", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmField", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmField"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmField"}], "label": "", "referencedClassName": "io.realm.annotations.RealmField", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmField", "typeName": "RealmField", "qualifiedTypeName": "io.realm.annotations.RealmField", "simpleTypeName": "RealmField", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file.\n <p>\n Examples where this is useful:\n <ul>\n      <li>\n          To support two model classes with the same simple name but in different packages.\n      </li>\n      <li>\n          To make it easier to work with cross platform schemas as naming conventions are different.\n      </li>\n      <li>\n          To use a Java class name that is longer than the 57 character limit enforced by Realm.\n      </li>\n      <li>\n          To change a field name in Java without forcing app users through a migration process.\n      </li>\n </ul>\n\n Depending on where the policy is applied, it will have slightly different semantics:\n <ul>\n     <li>\n         If applied to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file.\n <p>\n Examples where this is useful:\n <ul>\n      <li>\n          To support two model classes with the same simple name but in different packages.\n      </li>\n      <li>\n          To make it easier to work with cross platform schemas as naming conventions are different.\n      </li>\n      <li>\n          To use a Java class name that is longer than the 57 character limit enforced by Realm.\n      </li>\n      <li>\n          To change a field name in Java without forcing app users through a migration process.\n      </li>\n </ul>\n\n Depending on where the policy is applied, it will have slightly different semantics:\n <ul>\n     <li>\n         If applied to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModule#classNamingPolicy", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule#classNamingPolicy"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule#classNamingPolicy"}], "label": "", "referencedClassName": "io.realm.annotations.RealmModule", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmModule", "typeName": "RealmModule", "qualifiedTypeName": "io.realm.annotations.RealmModule", "simpleTypeName": "RealmModule", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "referencedMemberName": "classNamingPolicy"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " all classes part of that module\n         will be affected. If a class is part of multiple modules, the same naming policy must be\n         applied to both modules, otherwise an error will be thrown.\n     </li>\n     <li>\n         If applied to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " all classes part of that module\n         will be affected. If a class is part of multiple modules, the same naming policy must be\n         applied to both modules, otherwise an error will be thrown.\n     </li>\n     <li>\n         If applied to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "all classes part of that module\n         will be affected."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmModule#fieldNamingPolicy", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule#fieldNamingPolicy"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmModule#fieldNamingPolicy"}], "label": "", "referencedClassName": "io.realm.annotations.RealmModule", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmModule", "typeName": "RealmModule", "qualifiedTypeName": "io.realm.annotations.RealmModule", "simpleTypeName": "RealmModule", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "referencedMemberName": "fieldNamingPolicy"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " all persistable fields in all classes\n         part of this module will be affected.\n     </li>\n\n      <li>\n          If applied to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " all persistable fields in all classes\n         part of this module will be affected.\n     </li>\n\n      <li>\n          If applied to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "all persistable fields in all classes\n         part of this module will be affected."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmClass#fieldNamingPolicy", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass#fieldNamingPolicy"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass#fieldNamingPolicy"}], "label": "", "referencedClassName": "io.realm.annotations.RealmClass", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "referencedMemberName": "fieldNamingPolicy"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " all fields in that class will be\n          affected. This will override any field naming policy specified on a module.\n      </li>\n </ul>\n <p>\n An example of this:\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " all fields in that class will be\n          affected. This will override any field naming policy specified on a module.\n      </li>\n </ul>\n <p>\n An example of this:\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "all fields in that class will be\n          affected."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n \\@RealmClass(name = \"__person\", fieldNamingPolicy = RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n public class Person implements RealmModel { // is converted to \"__person\" internally\n     public string firstName; // Is converted to \"first_name\" internally\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n \\@RealmClass(name = \"__person\", fieldNamingPolicy = RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n public class Person implements RealmModel { // is converted to \"__person\" internally\n     public string firstName; // Is converted to \"first_name\" internally\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\\@RealmClass(name = \"__person\", fieldNamingPolicy = RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\n public class Person implements RealmModel { // is converted to \"__person\" internally\n     public string firstName; // Is converted to \"first_name\" internally\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Choosing an internal name that differs from the name used in the Java model classes has the\n following implications:\n <ul>\n      <li>\n          Queries on ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>\n Choosing an internal name that differs from the name used in the Java model classes has the\n following implications:\n <ul>\n      <li>\n          Queries on "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "DynamicRealm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "DynamicRealm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "DynamicRealm"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " must use the internal name. Queries on normal ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " must use the internal name. Queries on normal "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "must use the internal name."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Realm", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n          instances must continue to use the name as it is defined in the Java class.\n      </li>\n      <li>\n          Migrations must use the internal name when creating classes and fields.\n      </li>\n      <li>\n          Schema errors reported will use the internal names.\n      </li>\n </ul>\n <p>\n When automatically converting Java variable names, each variable name is normalized by splitting\n it into a list of words that are then joined using the rules of the target format. The following\n heuristics are used for determining what constitutes a \"word\".\n <ol>\n     <li>\n         Anytime a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n          instances must continue to use the name as it is defined in the Java class.\n      </li>\n      <li>\n          Migrations must use the internal name when creating classes and fields.\n      </li>\n      <li>\n          Schema errors reported will use the internal names.\n      </li>\n </ul>\n <p>\n When automatically converting Java variable names, each variable name is normalized by splitting\n it into a list of words that are then joined using the rules of the target format. The following\n heuristics are used for determining what constitutes a \"word\".\n <ol>\n     <li>\n         Anytime a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "instances must continue to use the name as it is defined in the Java class."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "_", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "or"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "$", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "$"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "$"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " is encountered.\n         Examples are \"_FirstName\", \"_First_Name\" and \"$First$Name\" which all becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from a lower case character to an upper case character as\n         identified by ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " is encountered.\n         Examples are \"_FirstName\", \"_First_Name\" and \"$First$Name\" which all becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from a lower case character to an upper case character as\n         identified by "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "is encountered."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Character#isUpperCase(int)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isUpperCase(int)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isUpperCase(int)"}], "label": "", "referencedClassName": "java.lang.Character", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Character", "typeName": "Character", "qualifiedTypeName": "java.lang.Character", "simpleTypeName": "Character", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "isUpperCase(int)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " and "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "and"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Character#isLowerCase(int)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isLowerCase(int)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isLowerCase(int)"}], "label": "", "referencedClassName": "java.lang.Character", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Character", "typeName": "Character", "qualifiedTypeName": "java.lang.Character", "simpleTypeName": "Character", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "isLowerCase(int)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n         Example is \"FirstName\" which becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from more than one uppercase character to a lower case one. The last\n         upper case letter is assumed to be part of the next word. This is identified by using\n         ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n         Example is \"FirstName\" which becomes \"First\" and \"Name\".\n     </li>\n     <li>\n         Anytime you switch from more than one uppercase character to a lower case one. The last\n         upper case letter is assumed to be part of the next word. This is identified by using\n         "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Character#isUpperCase(int)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isUpperCase(int)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isUpperCase(int)"}], "label": "", "referencedClassName": "java.lang.Character", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Character", "typeName": "Character", "qualifiedTypeName": "java.lang.Character", "simpleTypeName": "Character", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "isUpperCase(int)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " and ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " and "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "and"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Character#isLowerCase(int)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isLowerCase(int)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Character#isLowerCase(int)"}], "label": "", "referencedClassName": "java.lang.Character", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.Character", "typeName": "Character", "qualifiedTypeName": "java.lang.Character", "simpleTypeName": "Character", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "isLowerCase(int)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n         Example is \"FIRSTName\" which becomes \"FIRST\" and \"Name.\n     </li>\n     <li>\n         Some characters like emojiis are neither uppercase nor lowercase characters, so they will\n         be part of the current word.\n         Examples are \"myüòÅ\" and \"MYüòÅ\" which are both treated as one word.\n     </li>\n     <li>\n         Hungarian notation, i.e. variable names starting with lowercase \"m\" followed by uppercase\n         letter is stripped and not considered part of any word.\n         Example is \"mFirstName\" and \"mFIRSTName\" which becomes \"First\" and \"Name.\n     </li>\n </ol>\n <p>\n Note that changing the internal name does <i>NOT</i> affect importing data from JSON. The JSON\n data must still follow the names as defined in the Realm Java class.\n <p>\n When it comes to parsing JSON using standard libraries like Moshi, GSON or Jackson it is\n important to keep in mind that these libraries define the transformation from JSON to Java\n while setting internal Realm names define the transformation from Java to the Realm file.\n <p>\n This means that if you want to import data into Realm from JSON using these libraries you still\n need to provide the annotations from both the JSON parser library and Realm.\n <p>\n Using Moshi, it would look something like this:\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n         Example is \"FIRSTName\" which becomes \"FIRST\" and \"Name.\n     </li>\n     <li>\n         Some characters like emojiis are neither uppercase nor lowercase characters, so they will\n         be part of the current word.\n         Examples are \"myüòÅ\" and \"MYüòÅ\" which are both treated as one word.\n     </li>\n     <li>\n         Hungarian notation, i.e. variable names starting with lowercase \"m\" followed by uppercase\n         letter is stripped and not considered part of any word.\n         Example is \"mFirstName\" and \"mFIRSTName\" which becomes \"First\" and \"Name.\n     </li>\n </ol>\n <p>\n Note that changing the internal name does <i>NOT</i> affect importing data from JSON. The JSON\n data must still follow the names as defined in the Realm Java class.\n <p>\n When it comes to parsing JSON using standard libraries like Moshi, GSON or Jackson it is\n important to keep in mind that these libraries define the transformation from JSON to Java\n while setting internal Realm names define the transformation from Java to the Realm file.\n <p>\n This means that if you want to import data into Realm from JSON using these libraries you still\n need to provide the annotations from both the JSON parser library and Realm.\n <p>\n Using Moshi, it would look something like this:\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class Person extends RealmObject {\n     \\@Json(name = \"first_name\") // Name used in JSON input.\n     \\@RealmField(name = \"first_name\") // Name used internally in the Realm file.\n     public string firstName; // name used in Java\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class Person extends RealmObject {\n     \\@Json(name = \"first_name\") // Name used in JSON input.\n     \\@RealmField(name = \"first_name\") // Name used internally in the Realm file.\n     public string firstName; // name used in Java\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class Person extends RealmObject {\n     \\@Json(name = \"first_name\") // Name used in JSON input."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This enum defines the possible ways class and field names can be mapped from what is used in Java\n to the name used internally in the Realm file."}]}], "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy", "modifierSpecifier": 17, "modifiers": "public final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": true, "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isAbstract": false, "isSerializable": true, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [{"_class": "ParameterizedType", "asString": "java.lang.Enum<io.realm.annotations.RealmNamingPolicy>", "typeName": "Enum", "qualifiedTypeName": "java.lang.Enum", "simpleTypeName": "Enum", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.lang.Comparable", "java.io.Serializable"]}, {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "inheritedMethods": {"java.lang.Enum": ["name", "ordinal", "toString", "equals", "hashCode", "clone", "compareTo", "getDeclaringClass", "valueOf", "finalize"], "java.lang.Object": ["getClass", "hashCode", "equals", "clone", "toString", "notify", "notifyAll", "wait", "wait", "wait", "finalize"]}, "interfaceTypes": [], "typeParameters": [], "typeParamTags": [], "fields": [], "enumConstants": [{"commentText": "No policy is applied. This policy will not override any policy set on a parent element, e.g.\n if set in {@link RealmClass#fieldNamingPolicy}, the module policy will still apply to field\n names.\n <p>\n If two modules disagree on the policy and one of them is {@code NO_POLICY}, the other will\n be chosen without an error being thrown.\n <p>\n This policy is the default.", "name": "NO_POLICY", "isField": false, "isEnumConstant": true, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 134, "column": 5, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied. This policy will not override any policy set on a parent element, e.g.\n if set in ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied. This policy will not override any policy set on a parent element, e.g.\n if set in "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmClass#fieldNamingPolicy", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass#fieldNamingPolicy"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmClass#fieldNamingPolicy"}], "label": "", "referencedClassName": "io.realm.annotations.RealmClass", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmClass", "typeName": "RealmClass", "qualifiedTypeName": "io.realm.annotations.RealmClass", "simpleTypeName": "RealmClass", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "referencedMemberName": "fieldNamingPolicy"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the module policy will still apply to field\n names.\n <p>\n If two modules disagree on the policy and one of them is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the module policy will still apply to field\n names.\n <p>\n If two modules disagree on the policy and one of them is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the module policy will still apply to field\n names."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "NO_POLICY", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "NO_POLICY"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "NO_POLICY"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the other will\n be chosen without an error being thrown.\n <p>\n This policy is the default.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the other will\n be chosen without an error being thrown.\n <p>\n This policy is the default."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", the other will\n be chosen without an error being thrown."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "No policy is applied."}]}], "_class": "FieldDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.NO_POLICY", "modifierSpecifier": 25, "modifiers": "public static final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": true, "isSynthetic": false, "type": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isTransient": false, "isVolatile": false, "serialFieldTags": []}, {"commentText": "The name in the Java model class is used as is internally.", "name": "IDENTITY", "isField": false, "isEnumConstant": true, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 139, "column": 5, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is used as is internally."}]}], "_class": "FieldDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.IDENTITY", "modifierSpecifier": 25, "modifiers": "public static final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": true, "isSynthetic": false, "type": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isTransient": false, "isVolatile": false, "serialFieldTags": []}, {"commentText": "The name in the Java model class is converted to camelCase, i.e. all words are joined\n together with the first letter in the first word lower cased, and the first letter of\n all subsequent words upper cased. This is the standard naming schema in Java, Kotlin, Swift\n and JavaScript.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"firstName\".", "name": "CAMEL_CASE", "isField": false, "isEnumConstant": true, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 150, "column": 5, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e. all words are joined\n together with the first letter in the first word lower cased, and the first letter of\n all subsequent words upper cased. This is the standard naming schema in Java, Kotlin, Swift\n and JavaScript.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"firstName\".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e. all words are joined\n together with the first letter in the first word lower cased, and the first letter of\n all subsequent words upper cased. This is the standard naming schema in Java, Kotlin, Swift\n and JavaScript.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"firstName\"."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to camelCase, i.e."}]}], "_class": "FieldDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.CAMEL_CASE", "modifierSpecifier": 25, "modifiers": "public static final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": true, "isSynthetic": false, "type": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isTransient": false, "isVolatile": false, "serialFieldTags": []}, {"commentText": "The name in the Java model class is converted to PascalCase, i.e. all words are joined\n together with the first letter of all words upper cased. This is the default naming scheme\n in .NET.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"FirstName\".", "name": "PASCAL_CASE", "isField": false, "isEnumConstant": true, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 160, "column": 5, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e. all words are joined\n together with the first letter of all words upper cased. This is the default naming scheme\n in .NET.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"FirstName\".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e. all words are joined\n together with the first letter of all words upper cased. This is the default naming scheme\n in .NET.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"FirstName\"."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted to PascalCase, i.e."}]}], "_class": "FieldDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.PASCAL_CASE", "modifierSpecifier": 25, "modifiers": "public static final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": true, "isSynthetic": false, "type": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isTransient": false, "isVolatile": false, "serialFieldTags": []}, {"commentText": "The name in the Java model class is converted lowercase with each word separated by {@code _}.\n This is the default naming scheme in C++.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"first_name\".", "name": "LOWER_CASE_WITH_UNDERSCORES", "isField": false, "isEnumConstant": true, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 169, "column": 5, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "_", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n This is the default naming scheme in C++.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"first_name\".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n This is the default naming scheme in C++.\n <p>\n Examples: \"firstName\", \"FirstName\", \"mFirstName\", \"FIRST_NAME\", \"First$Name\" all becomes\n \"first_name\"."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The name in the Java model class is converted lowercase with each word separated by"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "_", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "_"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "FieldDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.LOWER_CASE_WITH_UNDERSCORES", "modifierSpecifier": 25, "modifiers": "public static final", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": true, "isSynthetic": false, "type": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isTransient": false, "isVolatile": false, "serialFieldTags": []}], "methods": [{"commentText": "", "name": "values", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 122, "column": 8, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.values", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "io.realm.annotations.RealmNamingPolicy[]", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, {"commentText": "", "name": "valueOf", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 122, "column": 8, "file": "./realm-annotations/src/main/java/io/realm/annotations/RealmNamingPolicy.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm.annotations"}, "qualifiedName": "io.realm.annotations.RealmNamingPolicy.valueOf", "modifierSpecifier": 9, "modifiers": "public static", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": true, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "name", "typeName": "String", "asString": "String name", "annotations": []}], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "io.realm.annotations.RealmNamingPolicy", "typeName": "RealmNamingPolicy", "qualifiedTypeName": "io.realm.annotations.RealmNamingPolicy", "simpleTypeName": "RealmNamingPolicy", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "constructors": [], "innerClasses": []}