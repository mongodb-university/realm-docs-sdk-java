{"commentText": "This class holds all the matches of a {@link RealmQuery} for a given Realm. The objects are not copied from\n the Realm to the RealmResults list, but are just referenced from the RealmResult instead. This saves memory and\n increases speed.\n <p>\n RealmResults are live views, which means that if it is on an {@link Looper} thread, it will automatically\n update its query results after a transaction has been committed. If on a non-looper thread,\n {@link Realm#refresh()} must be called to update the results.\n <p>\n Updates to RealmObjects from a RealmResults list must be done from within a transaction and the modified objects are\n persisted to the Realm file during the commit of the transaction.\n <p>\n A RealmResults object cannot be passed between different threads.\n <p>\n Notice that a RealmResults is never {@code null} not even in the case where it contains no objects. You should always\n use the {@link RealmResults#size()} method to check if a RealmResults is empty or not.\n <p>\n If a RealmResults is built on RealmList through {@link RealmList#where()}, it will become empty when the source\n RealmList gets deleted.\n <p>\n {@link RealmResults} can contain more elements than {@code Integer.MAX_VALUE}.\n In that case, you can access only first {@code Integer.MAX_VALUE} elements in it.", "name": "RealmResults", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": true, "isClass": true, "isIncluded": true, "position": {"line": 69, "column": 8, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> The class of objects in this list.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The class of objects in this list."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> The class of objects in this list."}], "parameterName": "E", "parameterComment": "The class of objects in this list.", "isTypeParameter": true}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmQuery#findAll()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findAll()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findAll()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findAll()"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#executeTransaction(Realm.Transaction)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#executeTransaction(Realm.Transaction)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#executeTransaction(Realm.Transaction)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "executeTransaction(Realm.Transaction)"}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "RealmQuery#findAll()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findAll()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery#findAll()"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "findAll()"}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "Realm#executeTransaction(Realm.Transaction)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#executeTransaction(Realm.Transaction)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#executeTransaction(Realm.Transaction)"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "executeTransaction(Realm.Transaction)"}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for a given Realm. The objects are not copied from\n the Realm to the RealmResults list, but are just referenced from the RealmResult instead. This saves memory and\n increases speed.\n <p>\n RealmResults are live views, which means that if it is on an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for a given Realm. The objects are not copied from\n the Realm to the RealmResults list, but are just referenced from the RealmResult instead. This saves memory and\n increases speed.\n <p>\n RealmResults are live views, which means that if it is on an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for a given Realm."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Looper", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Looper"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Looper"}], "label": "", "referencedClassName": "android.os.Looper", "referencedClass": {"_class": "ClassDoc", "asString": "android.os.Looper", "typeName": "Looper", "qualifiedTypeName": "android.os.Looper", "simpleTypeName": "Looper", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread, it will automatically\n update its query results after a transaction has been committed. If on a non-looper thread,\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread, it will automatically\n update its query results after a transaction has been committed. If on a non-looper thread,\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "thread, it will automatically\n update its query results after a transaction has been committed."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "Realm#refresh()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#refresh()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Realm#refresh()"}], "label": "", "referencedClassName": "io.realm.Realm", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.Realm", "typeName": "Realm", "qualifiedTypeName": "io.realm.Realm", "simpleTypeName": "Realm", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "refresh()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " must be called to update the results.\n <p>\n Updates to RealmObjects from a RealmResults list must be done from within a transaction and the modified objects are\n persisted to the Realm file during the commit of the transaction.\n <p>\n A RealmResults object cannot be passed between different threads.\n <p>\n Notice that a RealmResults is never ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " must be called to update the results.\n <p>\n Updates to RealmObjects from a RealmResults list must be done from within a transaction and the modified objects are\n persisted to the Realm file during the commit of the transaction.\n <p>\n A RealmResults object cannot be passed between different threads.\n <p>\n Notice that a RealmResults is never "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "must be called to update the results."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " not even in the case where it contains no objects. You should always\n use the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " not even in the case where it contains no objects. You should always\n use the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "not even in the case where it contains no objects."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults#size()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#size()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults#size()"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "size()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " method to check if a RealmResults is empty or not.\n <p>\n If a RealmResults is built on RealmList through ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " method to check if a RealmResults is empty or not.\n <p>\n If a RealmResults is built on RealmList through "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "method to check if a RealmResults is empty or not."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmList#where()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmList#where()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmList#where()"}], "label": "", "referencedClassName": "io.realm.RealmList", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmList<E>", "typeName": "RealmList", "qualifiedTypeName": "io.realm.RealmList", "simpleTypeName": "RealmList", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "where()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", it will become empty when the source\n RealmList gets deleted.\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", it will become empty when the source\n RealmList gets deleted.\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", it will become empty when the source\n RealmList gets deleted."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " can contain more elements than ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " can contain more elements than "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "can contain more elements than"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Integer.MAX_VALUE", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Integer.MAX_VALUE"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Integer.MAX_VALUE"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n In that case, you can access only first ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n In that case, you can access only first "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Integer.MAX_VALUE", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Integer.MAX_VALUE"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Integer.MAX_VALUE"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements in it.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " elements in it."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "elements in it."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "This class holds all the matches of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for a given Realm.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for a given Realm."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for a given Realm."}]}], "_class": "ParsedClassDoc", "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isAbstract": false, "isSerializable": false, "isExternalizable": false, "serializationMethods": [], "serializableFields": [], "definesSerializableFields": false, "superclasses": [{"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}], "inheritedMethods": {"io.realm.OrderedRealmCollectionImpl": ["isValid", "isManaged", "contains", "get", "first", "first", "last", "last", "deleteFromRealm", "deleteAllFromRealm", "iterator", "listIterator", "listIterator", "sort", "sort", "sort", "sort", "size", "min", "minDate", "max", "maxDate", "sum", "average", "remove", "remove", "removeAll", "set", "retainAll", "deleteLastFromRealm", "deleteFirstFromRealm", "clear", "add", "add", "addAll", "addAll", "createSnapshot", "getRealm"], "java.util.AbstractList": ["add", "get", "set", "add", "remove", "indexOf", "lastIndexOf", "clear", "addAll", "iterator", "listIterator", "listIterator", "subList", "equals", "hashCode", "removeRange"], "java.util.AbstractCollection": ["iterator", "size", "isEmpty", "contains", "toArray", "toArray", "add", "remove", "containsAll", "addAll", "removeAll", "retainAll", "clear", "toString"], "java.lang.Object": ["getClass", "hashCode", "equals", "clone", "toString", "notify", "notifyAll", "wait", "wait", "wait", "finalize"]}, "interfaceTypes": [], "typeParameters": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "typeParamTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "<E> The class of objects in this list.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "The class of objects in this list."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<E> The class of objects in this list."}], "parameterName": "E", "parameterComment": "The class of objects in this list.", "isTypeParameter": true}], "fields": [], "enumConstants": [], "methods": [{"commentText": "{@inheritDoc}", "name": "where", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 104, "column": 26, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a RealmQuery object.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a RealmQuery object."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a RealmQuery object."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm instance has been closed or queries are not otherwise available."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm instance has been closed or queries are not otherwise available."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm instance has been closed or queries are not otherwise available.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ", which can be used to query for specific objects from this collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.where", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": []}}, {"commentText": "{@inheritDoc}", "name": "sort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 113, "column": 28, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a new sorted {@link RealmResults} will be created and returned. The original collection stays unchanged.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a new sorted "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be created and returned. The original collection stays unchanged."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a new sorted "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be created and returned."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalArgumentException if a field name does not exist or has an invalid type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if a field name does not exist or has an invalid type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalArgumentException if a field name does not exist or has an invalid type."}], "exceptionName": "java.lang.IllegalArgumentException", "exceptionComment": "if a field name does not exist or has an invalid type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "java.lang.IllegalStateException if the Realm is closed, called on the wrong thread or the collection is\n an unmanaged collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm is closed, called on the wrong thread or the collection is\n an unmanaged collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "java.lang.IllegalStateException if the Realm is closed, called on the wrong thread or the collection is\n an unmanaged collection."}], "exceptionName": "java.lang.IllegalStateException", "exceptionComment": "if the Realm is closed, called on the wrong thread or the collection is\n an unmanaged collection.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName1 first field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName1 first field name."}], "parameterName": "fieldName1", "parameterComment": "first field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder1 sort order for first field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for first field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder1 sort order for first field."}], "parameterName": "sortOrder1", "parameterComment": "sort order for first field.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName2 second field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "second field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName2 second field name."}], "parameterName": "fieldName2", "parameterComment": "second field name. Only fields of type boolean, short, int, long, float,\n double, Date, and String are supported.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "sortOrder2 sort order for second field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sort order for second field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "sortOrder2 sort order for second field."}], "parameterName": "sortOrder2", "parameterComment": "sort order for second field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sorts a collection based on the provided fields and sort orders."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.sort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName1", "typeName": "String", "asString": "String fieldName1", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "sortOrder1", "typeName": "Sort", "asString": "Sort sortOrder1", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName2", "typeName": "String", "asString": "String fieldName2", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.Sort", "typeName": "Sort", "qualifiedTypeName": "io.realm.Sort", "simpleTypeName": "Sort", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "sortOrder2", "typeName": "Sort", "asString": "Sort sortOrder2", "annotations": []}], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "(java.lang.String, io.realm.Sort, java.lang.String, io.realm.Sort)", "flatSignature": "(String, Sort, String, Sort)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}, "overriddenType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "overriddenMethodContainingClass": {"_class": "ClassDoc", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "abstract"}}, {"commentText": "Returns {@code false} if the results are not yet loaded, {@code true} if they are loaded.", "name": "isLoaded", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 124, "column": 20, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the query has completed and the data is available, {@code false} if the query is still\n running in the background.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed and the data is available, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is still\n running in the background."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query has completed and the data is available, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the query is still\n running in the background."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the results are not yet loaded, ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the results are not yet loaded, "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the results are not yet loaded,"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if they are loaded.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if they are loaded."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if they are loaded."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "false"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the results are not yet loaded, ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the results are not yet loaded, "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the results are not yet loaded,"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "true"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if they are loaded.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if they are loaded."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if they are loaded."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.isLoaded", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Makes an asynchronous query blocking. This will also trigger any registered {@link RealmChangeListener} when\n the query completes.", "name": "load", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 136, "column": 20, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if it successfully completed the query, {@code false} otherwise.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it successfully completed the query, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " otherwise."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking. This will also trigger any registered "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " when\n the query completes.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " when\n the query completes."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "when\n the query completes."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Makes an asynchronous query blocking."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.load", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Updates the field given by {@code fieldName} in all objects inside the query result.\n <p>\n This method will automatically try to convert numbers and booleans that are given as\n {@code String} to their appropriate type. For example {@code \"10\"} will be converted to\n {@code 10} if the field type is {@link RealmFieldType#INTEGER}.\n <p>\n Using the typed setters like {@link #setInt(String, int)} will be faster than using\n this method.", "name": "setValue", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 163, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName field to update", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field to update"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName field to update"}], "parameterName": "fieldName", "parameterComment": "field to update", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value value to update with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value to update with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value value to update with."}], "parameterName": "value", "parameterComment": "value to update with.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName field to update", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field to update"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName field to update"}], "parameterName": "fieldName", "parameterComment": "field to update", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value value to update with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value to update with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value value to update with."}], "parameterName": "value", "parameterComment": "value to update with.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "fieldName", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " in all objects inside the query result.\n <p>\n This method will automatically try to convert numbers and booleans that are given as\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " in all objects inside the query result.\n <p>\n This method will automatically try to convert numbers and booleans that are given as\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "in all objects inside the query result."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "String", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to their appropriate type. For example ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to their appropriate type. For example "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to their appropriate type."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\"10\"", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\"10\""}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\"10\""}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be converted to\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be converted to\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be converted to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "10", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "10"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "10"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the field type is ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the field type is "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field type is"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmFieldType#INTEGER", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmFieldType#INTEGER"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmFieldType#INTEGER"}], "label": "", "referencedClassName": "io.realm.RealmFieldType", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmFieldType", "typeName": "RealmFieldType", "qualifiedTypeName": "io.realm.RealmFieldType", "simpleTypeName": "RealmFieldType", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public final"}, "referencedMemberName": "INTEGER"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Using the typed setters like ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Using the typed setters like "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#setInt(String, int)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#setInt(String, int)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#setInt(String, int)"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "setInt(String, int)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be faster than using\n this method.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be faster than using\n this method."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be faster than using\n this method."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Updates the field given by"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "fieldName", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " in all objects inside the query result.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " in all objects inside the query result."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "in all objects inside the query result."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setValue", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Object", "asString": "Object value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the field could not be found, could not be updated or\n the argument didn't match the field type or could not be converted to match the underlying\n field type.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName field to update", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "field to update"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName field to update"}], "parameterName": "fieldName", "parameterComment": "field to update", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value value to update with.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value to update with."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value value to update with."}], "parameterName": "value", "parameterComment": "value to update with.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.Object)", "flatSignature": "(String, Object)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the value to {@code null} for the given field in all of the objects in the collection.", "name": "setNull", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 259, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist or is a primary key property.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist or is a primary key property."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist or is a primary key property."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist or is a primary key property.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the field cannot hold {@code null} values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field cannot hold "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the field cannot hold "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the field cannot hold {@code null} values.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the value to"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " for the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " for the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "for the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setNull", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist or is a primary key property.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist or is a primary key property."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist or is a primary key property."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist or is a primary key property.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the field cannot hold {@code null} values.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the field cannot hold "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the field cannot hold "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " values."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the field cannot hold {@code null} values.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String)", "flatSignature": "(String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code boolean} value of the given field in all of the objects in the collection.", "name": "setBoolean", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 272, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a boolean field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a boolean field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a boolean field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a boolean field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "boolean", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "boolean"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "boolean"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "boolean", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "boolean"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "boolean"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setBoolean", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "boolean", "asString": "boolean value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a boolean field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a boolean field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a boolean field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a boolean field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, boolean)", "flatSignature": "(String, boolean)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code byte} value of the given field in all of the objects in the collection.", "name": "setByte", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 287, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a byte field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a byte field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a byte field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a byte field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "byte", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "byte"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "byte"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "byte", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "byte"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "byte"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setByte", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "byte", "typeName": "byte", "qualifiedTypeName": "byte", "simpleTypeName": "byte", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "byte", "asString": "byte value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a byte field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a byte field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a byte field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a byte field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, byte)", "flatSignature": "(String, byte)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code short} value of the given field in all of the objects in the collection.", "name": "setShort", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 302, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a short field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a short field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a short field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a short field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "short", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "short"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "short"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "short", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "short"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "short"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setShort", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "short", "typeName": "short", "qualifiedTypeName": "short", "simpleTypeName": "short", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "short", "asString": "short value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a short field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a short field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a short field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a short field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, short)", "flatSignature": "(String, short)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code int} value of the given field in all of the objects in the collection.", "name": "setInt", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 317, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an integer field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't an integer field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an integer field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't an integer field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "int", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "int"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "int"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "int", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "int"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "int"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setInt", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "int", "typeName": "int", "qualifiedTypeName": "int", "simpleTypeName": "int", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "int", "asString": "int value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an integer field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't an integer field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an integer field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't an integer field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, int)", "flatSignature": "(String, int)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code long} value of the given field in all of the objects in the collection.", "name": "setLong", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 332, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a long field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a long field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a long field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a long field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "long", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "long"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "long"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "long", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "long"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "long"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setLong", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "long", "typeName": "long", "qualifiedTypeName": "long", "simpleTypeName": "long", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "long", "asString": "long value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a long field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a long field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a long field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a long field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, long)", "flatSignature": "(String, long)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code float} value of the given field in all of the objects in the collection.", "name": "setFloat", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 347, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a float field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a float field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a float field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a float field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "float", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "float"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "float"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "float", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "float"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "float"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setFloat", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "float", "typeName": "float", "qualifiedTypeName": "float", "simpleTypeName": "float", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "float", "asString": "float value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a float field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a float field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a float field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a float field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, float)", "flatSignature": "(String, float)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code double} value of the given field in all of the objects in the collection.", "name": "setDouble", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 362, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a double field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a double field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a double field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a double field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "double", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "double"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "double"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "double", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "double"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "double"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setDouble", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "double", "typeName": "double", "qualifiedTypeName": "double", "simpleTypeName": "double", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "double", "asString": "double value", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a double field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a double field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a double field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a double field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, double)", "flatSignature": "(String, double)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code String} value of the given field in all of the objects in the collection.", "name": "setString", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 377, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a String field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a String field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a String field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a String field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "String", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "String", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "String"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setString", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "String", "asString": "String value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a String field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a String field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a String field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a String field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.lang.String)", "flatSignature": "(String, String)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the binary value of the given field in all of the objects in the collection.", "name": "setBlob", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 392, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a binary field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a binary field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a binary field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a binary field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the binary value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setBlob", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "byte[]", "typeName": "byte", "qualifiedTypeName": "byte", "simpleTypeName": "byte", "dimension": "[]", "isPrimitive": true, "elementType": {"_class": "Type", "asString": "byte", "typeName": "byte", "qualifiedTypeName": "byte", "simpleTypeName": "byte", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "byte[]", "asString": "byte[] value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a binary field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a binary field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a binary field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a binary field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, byte[])", "flatSignature": "(String, byte[])", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code Date} value of the given field in all of the objects in the collection.", "name": "setDate", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 407, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code Date} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code Date} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Date"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Date"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Date"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Date"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setDate", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "java.util.Date", "typeName": "Date", "qualifiedTypeName": "java.util.Date", "simpleTypeName": "Date", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "Date", "asString": "Date value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code Date} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Date"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code Date} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, java.util.Date)", "flatSignature": "(String, Date)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets a reference to another object on the given field in all of the objects in the collection.", "name": "setObject", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 422, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new object referenced by this field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new object referenced by this field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new object referenced by this field."}], "parameterName": "value", "parameterComment": "new object referenced by this field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an Object reference field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't an Object reference field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an Object reference field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't an Object reference field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new object referenced by this field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new object referenced by this field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new object referenced by this field."}], "parameterName": "value", "parameterComment": "new object referenced by this field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets a reference to another object on the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setObject", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ClassDoc", "asString": "io.realm.RealmModel", "typeName": "RealmModel", "qualifiedTypeName": "io.realm.RealmModel", "simpleTypeName": "RealmModel", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "value", "typeName": "RealmModel", "asString": "RealmModel value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an Object reference field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't an Object reference field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't an Object reference field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't an Object reference field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new object referenced by this field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new object referenced by this field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new object referenced by this field."}], "parameterName": "value", "parameterComment": "new object referenced by this field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, io.realm.RealmModel)", "flatSignature": "(String, RealmModel)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code Decimal128} value of the given field in all of the objects in the collection.", "name": "setDecimal128", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 438, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code Decimal128} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code Decimal128} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Decimal128"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Decimal128"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Decimal128"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Decimal128"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setDecimal128", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "Decimal128", "typeName": "Decimal128", "qualifiedTypeName": "Decimal128", "simpleTypeName": "Decimal128", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "Decimal128", "asString": "Decimal128 value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code Decimal128} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "Decimal128"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code Decimal128} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, Decimal128)", "flatSignature": "(String, Decimal128)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Sets the {@code ObjectId} value of the given field in all of the objects in the collection.", "name": "setObjectId", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 453, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code ObjectId} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code ObjectId} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectId"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectId"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Sets the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectId"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "ObjectId"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " value of the given field in all of the objects in the collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value of the given field in all of the objects in the collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setObjectId", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "Type", "asString": "ObjectId", "typeName": "ObjectId", "qualifiedTypeName": "ObjectId", "simpleTypeName": "ObjectId", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}, "name": "value", "typeName": "ObjectId", "asString": "ObjectId value", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "Nullable", "typeName": "Nullable", "qualifiedTypeName": "Nullable", "simpleTypeName": "Nullable", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public static"}, "elementValues": [], "isSynthesized": false}]}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code ObjectId} field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "ObjectId"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " field."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, is a primary key property or isn't a {@code ObjectId} field.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "value new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "value new value for the field."}], "parameterName": "value", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, ObjectId)", "flatSignature": "(String, ObjectId)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Replaces the RealmList at the given field on all objects in this collection.", "name": "setList", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 497, "column": 21, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "list new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "list new value for the field."}], "parameterName": "list", "parameterComment": "new value for the field.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "list new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "list new value for the field."}], "parameterName": "list", "parameterComment": "new value for the field.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Replaces the RealmList at the given field on all objects in this collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.setList", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "SuppressWarnings.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang"}, "qualifiedName": "java.lang.SuppressWarnings.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, "value": "\"unchecked\""}], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "name": "fieldName", "typeName": "String", "asString": "String fieldName", "annotations": []}, {"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmList<T>", "typeName": "RealmList", "qualifiedTypeName": "io.realm.RealmList", "simpleTypeName": "RealmList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "T", "typeName": "T", "qualifiedTypeName": "T", "simpleTypeName": "T", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<T>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "T", "typeName": "T", "qualifiedTypeName": "T", "simpleTypeName": "T", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<T>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "T", "typeName": "T", "qualifiedTypeName": "T", "simpleTypeName": "T", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "name": "list", "typeName": "io.realm.RealmList<T>", "asString": "io.realm.RealmList<T> list", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if field name doesn't exist, isn't a RealmList field , if the\n objects in the list are not managed or the type of the objects in the list are wrong.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "fieldName name of the field to update.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "name of the field to update."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "fieldName name of the field to update."}], "parameterName": "fieldName", "parameterComment": "name of the field to update.", "isTypeParameter": false}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "list new value for the field.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "new value for the field."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "list new value for the field."}], "parameterName": "list", "parameterComment": "new value for the field.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(java.lang.String, io.realm.RealmList<T>)", "flatSignature": "(String, RealmList<T>)", "typeParameters": [{"_class": "TypeVariable", "asString": "T", "typeName": "T", "qualifiedTypeName": "T", "simpleTypeName": "T", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "{@inheritDoc}", "name": "isFrozen", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 586, "column": 20, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "{@code true} if the object is frozen, {@code false} if it is not.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ""}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "true"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if the object is frozen, "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "false"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " if it is not."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns whether or not this object is frozen."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.isFrozen", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "boolean", "typeName": "boolean", "qualifiedTypeName": "boolean", "simpleTypeName": "boolean", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "{@inheritDoc}", "name": "freeze", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 594, "column": 28, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "a frozen copy of this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "a frozen copy of this collection."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if this method is called from inside a write transaction.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if this method is called from inside a write transaction."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if this method is called from inside a write transaction."}], "exceptionName": "IllegalStateException", "exceptionComment": "if this method is called from inside a write transaction.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection. The frozen copy can be read and queried from any thread without throwing\n an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection. The frozen copy can be read and queried from any thread without throwing\n an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a collection also creates a Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and this\n collection will be closed as well.\n <p>\n Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Freezing a collection also creates a Realm which has its own lifecycle, but if the live Realm that spawned the\n original collection is fully closed (i.e. all instances across all threads are closed), the frozen Realm and this\n collection will be closed as well.\n <p>\n Frozen collections can be queried as normal, but trying to mutate it in any way or attempting to register a listener will\n throw an "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "IllegalStateException", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException"}], "label": "", "referencedClassName": "java.lang.IllegalStateException", "referencedClass": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen collections with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation, it is possible to set ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Note: Keeping a large number of frozen collections with different versions alive can have a negative impact on the filesize\n of the Realm. In order to avoid such a situation, it is possible to set "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmConfiguration.Builder#maxNumberOfActiveVersions(long)"}], "label": "", "referencedClassName": "io.realm.RealmConfiguration.Builder", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmConfiguration.Builder", "typeName": "RealmConfiguration.Builder", "qualifiedTypeName": "io.realm.RealmConfiguration.Builder", "simpleTypeName": "Builder", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public static"}, "referencedMemberName": "maxNumberOfActiveVersions(long)"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a frozen snapshot of this collection."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.freeze", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.Override", "typeName": "Override", "qualifiedTypeName": "java.lang.Override", "simpleTypeName": "Override", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}}, {"commentText": "Adds a change listener to this {@link RealmResults}.\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new RealmChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 660, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new RealmChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new RealmChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new RealmChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.addChangeListener", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener<io.realm.RealmResults<E>>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener<io.realm.RealmResults<E>>", "asString": "io.realm.RealmChangeListener<io.realm.RealmResults<E>> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmChangeListener<io.realm.RealmResults<E>>)", "flatSignature": "(RealmChangeListener<RealmResults<E>>)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Adds a change listener to this {@link RealmResults}.\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n {@code\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons, OrderedCollectionChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n }\n </pre>", "name": "addChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 698, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ".\n <p>\n Registering a change listener will not prevent the underlying RealmResults from being garbage collected.\n If the RealmResults is garbage collected, the change listener will stop being triggered. To avoid this, keep a\n strong reference for as long as appropriate e.g. in a class variable.\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons, OrderedCollectionChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons, OrderedCollectionChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "public class MyActivity extends Activity {\n\n     private RealmResults<Person> results; // Strong reference to keep listeners alive\n\n     \\@Override\n     protected void onCreate(Bundle savedInstanceState) {\n       super.onCreate(savedInstanceState);\n       results = realm.where(Person.class).findAllAsync();\n       results.addChangeListener(new OrderedRealmCollectionChangeListener<RealmResults<Person>>() {\n           \\@Override\n           public void onChange(RealmResults<Person> persons, OrderedCollectionChangeSet changeSet) {\n               // React to change\n           }\n       });\n     }\n }"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Adds a change listener to this"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmResults", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmResults"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.addChangeListener", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>", "typeName": "OrderedRealmCollectionChangeListener", "qualifiedTypeName": "io.realm.OrderedRealmCollectionChangeListener", "simpleTypeName": "OrderedRealmCollectionChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>", "asString": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to add a listener from a non-Looper or\n "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "android.app.IntentService", "label": "", "referencedClassName": "android.app.IntentService", "referencedClass": {"_class": "ClassDoc", "asString": "android.app.IntentService", "typeName": "IntentService", "qualifiedTypeName": "android.app.IntentService", "simpleTypeName": "IntentService", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public abstract"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to add a listener from a non-Looper or\n {@link android.app.IntentService} thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be notified.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be notified."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be notified."}], "parameterName": "listener", "parameterComment": "the change listener to be notified.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>)", "flatSignature": "(OrderedRealmCollectionChangeListener<RealmResults<E>>)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes all user-defined change listeners.", "name": "removeAllChangeListeners", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 728, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove listeners from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove listeners from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove listeners from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove listeners from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes all user-defined change listeners."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.removeAllChangeListeners", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove listeners from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove listeners from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove listeners from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove listeners from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes the specified change listener.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 741, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.removeChangeListener", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.RealmChangeListener<io.realm.RealmResults<E>>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.RealmChangeListener<io.realm.RealmResults<E>>", "asString": "io.realm.RealmChangeListener<io.realm.RealmResults<E>> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.RealmChangeListener<io.realm.RealmResults<E>>)", "flatSignature": "(RealmChangeListener<RealmResults<E>>)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Removes the specified change listener.", "name": "removeChangeListener", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 754, "column": 17, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "io.realm.RealmChangeListener", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "io.realm.RealmChangeListener"}], "label": "", "referencedClassName": "io.realm.RealmChangeListener", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmChangeListener<T>", "typeName": "RealmChangeListener", "qualifiedTypeName": "io.realm.RealmChangeListener", "simpleTypeName": "RealmChangeListener", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Removes the specified change listener."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.removeChangeListener", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [{"type": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>", "typeName": "OrderedRealmCollectionChangeListener", "qualifiedTypeName": "io.realm.OrderedRealmCollectionChangeListener", "simpleTypeName": "OrderedRealmCollectionChangeListener", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "ParameterizedType", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "io.realm.OrderedRealmCollectionImpl<E>", "typeName": "OrderedRealmCollectionImpl", "qualifiedTypeName": "io.realm.OrderedRealmCollectionImpl", "simpleTypeName": "OrderedRealmCollectionImpl", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractList<E>", "typeName": "AbstractList", "qualifiedTypeName": "java.util.AbstractList", "simpleTypeName": "AbstractList", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ParameterizedType", "asString": "java.util.AbstractCollection<E>", "typeName": "AbstractCollection", "qualifiedTypeName": "java.util.AbstractCollection", "simpleTypeName": "AbstractCollection", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "typeArguments": [{"_class": "TypeVariable", "asString": "E", "typeName": "E", "qualifiedTypeName": "E", "simpleTypeName": "E", "dimension": "", "isPrimitive": false, "isClass": false, "isAnnotationType": false, "bounds": [], "annotations": []}], "superclassType": {"_class": "ClassDoc", "asString": "java.lang.Object", "typeName": "Object", "qualifiedTypeName": "java.lang.Object", "simpleTypeName": "Object", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "interfaceTypes": ["java.util.Collection"]}, "interfaceTypes": ["java.util.List"]}, "interfaceTypes": ["io.realm.OrderedRealmCollection"]}, "interfaceTypes": []}], "interfaceTypes": []}, "name": "listener", "typeName": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>", "asString": "io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>> listener", "annotations": []}], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalArgumentException if the change listener is {@code null}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalArgumentException if the change listener is "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "exceptionName": "IllegalArgumentException", "exceptionComment": "if the change listener is {@code null}.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalArgumentException", "typeName": "IllegalArgumentException", "qualifiedTypeName": "java.lang.IllegalArgumentException", "simpleTypeName": "IllegalArgumentException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if you try to remove a listener from a non-Looper Thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if you try to remove a listener from a non-Looper Thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if you try to remove a listener from a non-Looper Thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [{"_class": "ParamTag", "name": "@param", "kind": "@param", "text": "listener the change listener to be removed.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the change listener to be removed."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "listener the change listener to be removed."}], "parameterName": "listener", "parameterComment": "the change listener to be removed.", "isTypeParameter": false}], "typeParamTags": [], "signature": "(io.realm.OrderedRealmCollectionChangeListener<io.realm.RealmResults<E>>)", "flatSignature": "(OrderedRealmCollectionChangeListener<RealmResults<E>>)", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "void", "typeName": "void", "qualifiedTypeName": "void", "simpleTypeName": "void", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an Rx Flowable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed to. RealmResults will continually be emitted as the RealmResults are updated -\n {@code onComplete} will never be called.\n <p>\n Items emitted from Realm Flowables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live RealmResults. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n realm.where(Foo.class).findAllAsync().asFlowable()\n   .observeOn(Schedulers.computation())\n   .map(rxResults -> doExpensiveWork(rxResults))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }\n <p>\n If you would like the {@code asFlowable()} to stop emitting items you can instruct RxJava to\n only emit only the first item by using the {@code first()} operator:\n <p>\n <pre>\n {@code\n realm.where(Foo.class).findAllAsync().asFlowable()\n      .filter(results -> results.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the results once\n }\n </pre>\n <p>", "name": "asFlowable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 800, "column": 38, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete}\n or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed to. RealmResults will continually be emitted as the RealmResults are updated -\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed to. RealmResults will continually be emitted as the RealmResults are updated -\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Flowables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Flowables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live RealmResults. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Flowables always emit items from the thread holding the live RealmResults. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "realm.where(Foo.class).findAllAsync().asFlowable()\n   .observeOn(Schedulers.computation())\n   .map(rxResults -> doExpensiveWork(rxResults))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(Foo.class).findAllAsync().asFlowable()\n   .observeOn(Schedulers.computation())\n   .map(rxResults -> doExpensiveWork(rxResults))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(Foo.class).findAllAsync().asFlowable()\n   .observeOn(Schedulers.computation())\n   .map(rxResults -> doExpensiveWork(rxResults))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n <p>\n If you would like the "}], "firstSentenceTags": []}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "asFlowable()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "asFlowable()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n only emit only the first item by using the ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " to stop emitting items you can instruct RxJava to\n only emit only the first item by using the "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "to stop emitting items you can instruct RxJava to\n only emit only the first item by using the"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "first()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "first()"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " operator:\n <p>\n <pre>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "operator:"}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "\n realm.where(Foo.class).findAllAsync().asFlowable()\n      .filter(results -> results.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the results once\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n realm.where(Foo.class).findAllAsync().asFlowable()\n      .filter(results -> results.isLoaded())\n      .first()\n      .subscribe( ... ) // You only get the results once\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(Foo.class).findAllAsync().asFlowable()\n      .filter(results -> results.isLoaded())\n      .first()\n      .subscribe( ..."}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "\n </pre>\n <p>"}], "firstSentenceTags": []}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Flowable that monitors changes to this RealmResults."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.asFlowable", "modifierSpecifier": 1, "modifiers": "public", "annotations": [{"annotationType": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "elementValues": [{"element": {"commentText": "", "name": "value", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": false, "isAnnotationTypeElement": true, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": false, "position": {"line": 0, "column": 0, "file": "SuppressWarnings.java"}, "tags": [], "seeTags": [], "inlineTags": [], "firstSentenceTags": [], "_class": "AnnotationTypeElementDoc", "containingClass": {"_class": "ClassDoc", "asString": "java.lang.SuppressWarnings", "typeName": "SuppressWarnings", "qualifiedTypeName": "java.lang.SuppressWarnings", "simpleTypeName": "SuppressWarnings", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": true, "modifiers": "public interface"}, "containingPackage": {"_class": "PackageDoc", "name": "java.lang"}, "qualifiedName": "java.lang.SuppressWarnings.value", "modifierSpecifier": 1025, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "java.lang.String[]", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "[]", "isPrimitive": false, "elementType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}, "isClass": false, "isAnnotationType": false}}, "value": "\"unchecked\""}], "isSynthesized": false}], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns an Rx Observable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed. For each update to the RealmResult a pair consisting of the RealmResults and the\n {@link OrderedCollectionChangeSet} will be sent. The changeset will be {@code null} the first\n time an RealmResults is emitted.\n <p>\n RealmResults will continually be emitted as the RealmResults are updated - {@code onComplete} will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See {@link #freeze()}. This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n {@code\n realm.where(Foo.class).findAllAsync().asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxResults, changes) -> doExpensiveWork(rxResults, changes))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n }", "name": "asChangesetObservable", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 845, "column": 58, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "RxJava Observable that only calls {@code onNext}. It will never call {@code onComplete} or {@code OnError}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". It will never call "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " or "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "OnError"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RxJava Observable that only calls "}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onNext"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "seeTags": [{"_class": "SeeTag", "name": "@see", "kind": "@see", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "<a href=\"https://realm.io/docs/java/latest/#rxjava\">RxJava and Realm</a>"}], "label": ""}], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed. For each update to the RealmResult a pair consisting of the RealmResults and the\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults. It will emit the current RealmResults when\n subscribed. For each update to the RealmResult a pair consisting of the RealmResults and the\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "OrderedCollectionChangeSet", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "OrderedCollectionChangeSet"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "OrderedCollectionChangeSet"}], "label": "", "referencedClassName": "io.realm.OrderedCollectionChangeSet", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.OrderedCollectionChangeSet", "typeName": "OrderedCollectionChangeSet", "qualifiedTypeName": "io.realm.OrderedCollectionChangeSet", "simpleTypeName": "OrderedCollectionChangeSet", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public interface"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will be sent. The changeset will be "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will be sent."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "null", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "null"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time an RealmResults is emitted.\n <p>\n RealmResults will continually be emitted as the RealmResults are updated - ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " the first\n time an RealmResults is emitted.\n <p>\n RealmResults will continually be emitted as the RealmResults are updated - "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "the first\n time an RealmResults is emitted."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "onComplete", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "onComplete"}]}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": " will never be called.\n <p>\n Items emitted from Realm Observables are frozen (See "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "will never be called."}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "#freeze()", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "#freeze()"}], "label": "", "referencedClassName": "io.realm.RealmResults", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "referencedMemberName": "freeze()"}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". This means that they\n are immutable and can be read on any thread.\n <p>\n Realm Observables always emit items from the thread holding the live Realm. This means that if\n you need to do further processing, it is recommend to observe the values on a computation\n scheduler:\n <p>\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}, {"_class": "Tag", "name": "@code", "kind": "@code", "text": "realm.where(Foo.class).findAllAsync().asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxResults, changes) -> doExpensiveWork(rxResults, changes))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(Foo.class).findAllAsync().asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxResults, changes) -> doExpensiveWork(rxResults, changes))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ... );\n "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "realm.where(Foo.class).findAllAsync().asChangesetObservable()\n   .observeOn(Schedulers.computation())\n   .map((rxResults, changes) -> doExpensiveWork(rxResults, changes))\n   .observeOn(AndroidSchedulers.mainThread())\n   .subscribe( ..."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns an Rx Observable that monitors changes to this RealmResults."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.asChangesetObservable", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [{"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "UnsupportedOperationException if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava."}], "exceptionName": "UnsupportedOperationException", "exceptionComment": "if the required RxJava framework is not on the classpath or the\n corresponding Realm instance doesn't support RxJava.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.UnsupportedOperationException", "typeName": "UnsupportedOperationException", "qualifiedTypeName": "java.lang.UnsupportedOperationException", "simpleTypeName": "UnsupportedOperationException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}, {"_class": "ThrowsTag", "name": "@throws", "kind": "@throws", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "if the Realm wasn't opened on a Looper thread."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "IllegalStateException if the Realm wasn't opened on a Looper thread."}], "exceptionName": "IllegalStateException", "exceptionComment": "if the Realm wasn't opened on a Looper thread.", "exceptionType": {"_class": "ClassDoc", "asString": "java.lang.IllegalStateException", "typeName": "IllegalStateException", "qualifiedTypeName": "java.lang.IllegalStateException", "simpleTypeName": "IllegalStateException", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "Type", "asString": "<any>", "typeName": "<any>", "qualifiedTypeName": "<any>", "simpleTypeName": "<any>", "dimension": "", "isPrimitive": true, "isClass": false, "isAnnotationType": false}}, {"commentText": "Returns a JSON representation of the matches of a {@link RealmQuery}. Cycles will be returned as row indices.\n\n This is a helper method used to inspect data, or for debugging purpose, this method could pull a large string which\n could cause an OutOfMemory error.", "name": "asJSON", "isField": false, "isEnumConstant": false, "isConstructor": false, "isMethod": true, "isAnnotationTypeElement": false, "isInterface": false, "isException": false, "isError": false, "isEnum": false, "isAnnotationType": false, "isOrdinaryClass": false, "isClass": false, "isIncluded": true, "position": {"line": 865, "column": 19, "file": "./realm/realm-library/src/main/java/io/realm/RealmResults.java"}, "tags": [{"_class": "Tag", "name": "@return", "kind": "@return", "text": "string representation of a JSON array containing entries of the resulting {@link RealmQuery}.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "string representation of a JSON array containing entries of the resulting "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "string representation of a JSON array containing entries of the resulting "}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "seeTags": [], "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Cycles will be returned as row indices.\n\n This is a helper method used to inspect data, or for debugging purpose, this method could pull a large string which\n could cause an OutOfMemory error.", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": ". Cycles will be returned as row indices.\n\n This is a helper method used to inspect data, or for debugging purpose, this method could pull a large string which\n could cause an OutOfMemory error."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a ", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a "}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "Returns a JSON representation of the matches of a"}]}, {"_class": "SeeTag", "name": "@link", "kind": "@see", "text": "RealmQuery", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "RealmQuery"}], "label": "", "referencedClassName": "io.realm.RealmQuery", "referencedClass": {"_class": "ClassDoc", "asString": "io.realm.RealmQuery<E>", "typeName": "RealmQuery", "qualifiedTypeName": "io.realm.RealmQuery", "simpleTypeName": "RealmQuery", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}}, {"_class": "Tag", "name": "Text", "kind": "Text", "text": ".", "inlineTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}], "firstSentenceTags": [{"_class": "Tag", "name": "Text", "kind": "Text", "text": "."}]}], "_class": "MethodDoc", "containingClass": {"_class": "ClassDoc", "asString": "io.realm.RealmResults<E>", "typeName": "RealmResults", "qualifiedTypeName": "io.realm.RealmResults", "simpleTypeName": "RealmResults", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false, "modifiers": "public"}, "containingPackage": {"_class": "PackageDoc", "name": "io.realm"}, "qualifiedName": "io.realm.RealmResults.asJSON", "modifierSpecifier": 1, "modifiers": "public", "annotations": [], "isPublic": true, "isProtected": false, "isPrivate": false, "isPackagePrivate": false, "isStatic": false, "isFinal": false, "isSynthetic": false, "thrownExceptionTypes": [], "isNative": false, "isSynchronized": false, "isVarArgs": false, "parameters": [], "throwsTags": [], "paramTags": [], "typeParamTags": [], "signature": "()", "flatSignature": "()", "typeParameters": [], "isAbstract": false, "isDefault": false, "returnType": {"_class": "ClassDoc", "asString": "java.lang.String", "typeName": "String", "qualifiedTypeName": "java.lang.String", "simpleTypeName": "String", "dimension": "", "isPrimitive": false, "isClass": true, "isAnnotationType": false}}], "constructors": [], "innerClasses": []}